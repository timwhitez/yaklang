name: ManualDist

on:
  push:
    branches:
      - "ci/dist/*"

jobs:
  build_and_release:
    if: ${{ startsWith(github.ref, 'refs/tags/v') || startsWith(github.ref, 'refs/heads/ci/') }}
    strategy:
      matrix:
        os:
          - windows-2022
          - macos-12
          - macos-arm64
          - ubuntu-20.04
          - ubuntu-20.04-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set Yak Version by Tag
        uses: mad9000/actions-find-and-replace-string@1
        id: fetchtag
        with:
          source: ${{ github.ref }}
          find: 'refs/tags/'
          replace: ''
      - name: Print RELEASE_VERSION
        run: |
          echo "github actions's env VERSION: ${{ steps.fetchtag.outputs.value }}"
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: './go.mod'
      #      - name: Download Npcap SDK (Windows)
      #        run: |
      #          Invoke-WebRequest https://nmap.org/npcap/dist/npcap-sdk-1.07.zip -OutFile C:\NpcapSDK.zip
      #          Expand-Archive C:\NpcapSDK.zip -DestinationPath ..\wpdpack
      #        if: runner.os == 'Windows'
      - name: Install libpcap (macOS)
        run: |
          brew install libpcap
        if: runner.os == 'macOS'

      - name: Install libpcap (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install libpcap-dev
        if: runner.os == 'Linux'

      - name: Generate Document
        run: go run common/yak/yakdoc/generate_doc/generate_doc.go common/yak/yakdoc/doc/doc.gob.gzip

      - name: Initialize License Machine
        run: go run common/xlic/cmd/initializer.go --ak ${{ secrets.OSS_KEY_ID }} --sk ${{ secrets.OSS_KEY_SECRET }}

      - name: Build For Linux (AMD64)
        run: |
          go build -ldflags "-linkmode external -extldflags '-static' -s -w -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(git show -s --format=%cd)' -X 'main.yakVersion=${{ steps.fetchtag.outputs.value }}'" -o "./yak_$(go env GOOS)_$(go env GOARCH)" -v common/yak/cmd/yak.go
        if: runner.os == 'Linux' && runner.arch == 'x64'

      - name: Build For Linux (ARM64)
        run: |
          go build -ldflags "-linkmode external -extldflags '-static' -s -w -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(git show -s --format=%cd)' -X 'main.yakVersion=${{ steps.fetchtag.outputs.value }}'" -o "./yak_$(go env GOOS)_$(go env GOARCH)" -v common/yak/cmd/yak.go
        if: runner.os == 'Linux' && runner.arch == 'arm64'

      - name: Build For MacOS (Intel)
        run: |
          go build -ldflags "-s -w -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(git show -s --format=%cd)' -X 'main.yakVersion=${{ steps.fetchtag.outputs.value }}'" -o "./yak_$(go env GOOS)_$(go env GOARCH)" -v common/yak/cmd/yak.go
        if: runner.os == 'macOS' && runner.arch == 'x64'

      - name: Build For MacOS (Apple Silicon)
        run: |
          go build -ldflags "-s -w -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(git show -s --format=%cd)' -X 'main.yakVersion=${{ steps.fetchtag.outputs.value }}'" -o "./yak_$(go env GOOS)_$(go env GOARCH)" -v common/yak/cmd/yak.go
        if: runner.os == 'macOS' && runner.arch == 'arm64'

      - name: Build For Windows
        run: |
          go build -ldflags "-s -w -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(git show -s --format=%cd)' -X 'main.yakVersion=${{ steps.fetchtag.outputs.value }}'" -o ./yak_windows_amd64.exe -v common/yak/cmd/yak.go
        if: runner.os == 'Windows'

      - name: Upload Artifacts Windows
        uses: actions/upload-artifact@v2
        if: runner.os == 'Windows'
        with:
          name: yak_windows_amd64.exe
          path: ./yak_windows_amd64.exe

      - name: Upload Artifacts MacOS
        uses: actions/upload-artifact@v2
        if: runner.os == 'macOS' && env.GOARCH == 'amd64'
        with:
          name: yak_darwin_amd64
          path: ./yak_darwin_amd64

      - name: Upload Artifacts MacOS(arm64)
        uses: actions/upload-artifact@v2
        if: runner.os == 'macOS' && env.GOARCH == 'arm64'
        with:
          name: yak_darwin_arm64
          path: ./yak_darwin_arm64


      - name: Upload Artifacts Linux
        uses: actions/upload-artifact@v2
        if: runner.os == 'Linux'
        with:
          name: yak_linux_amd64
          path: ./yak_linux_amd64

      - name: Upload Artifacts Linux(arm64)
        uses: actions/upload-artifact@v2
        if: runner.os == 'Linux' && env.GOARCH == 'arm64'
        with:
          name: yak_linux_arm64
          path: ./yak_linux_arm64