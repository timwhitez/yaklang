endian: big
Package:
  Ethernet:
    Destination: raw,6
    Source: raw,6
    Type: raw,2
  Internet:
    length-from-field: Header Length
    length-from-field-multiply: 32
    Version: uint8,4bit
    Header Length: uint8,4bit
    Type of Service: raw,1
    Total Length: uint16
    Identification: raw,2
    Flags And Fragment Offset : raw,2
    Time to Live: raw,1
    Protocol: uint8
    Header Checksum: raw,2
    Source: raw,4
    Destination: raw,4
    Payload:
      operator: |
        protocol = getNodeResult("@Internet/Protocol")
        total = getNodeResult("@Internet/Total Length")
        switch protocol {
          case 6:
            this.AppendNode(getRootNode("TCP"))
            this.GetSubNode("TCP").SetCfg("length", total*8 - getNode("@Internet").CalcNodeResultLength())
            this.GetSubNode("TCP").Process()
          case 17:
            this.AppendNode(getRootNode("UDP"))
          default:
            return
        }

#        n = getNodeResult("@Internet.Total Length")*8 - this.GetSubNode("TCP").CalcNodeResultLength() - this.GetSubNode("Internet").CalcNodeResultLength()
#        this.AppendNode(getRootNode("Unknown"))
#        this.GetSubNode("Unknown").SetCfg("length", n)
#        this.GetSubNode("Unknown").Process()


TCP: "import:tcp.yaml;node:Package/TCP"
UDP: "import:udp.yaml;node:Package/UDP"
TLS: "import:tls.yaml;node:Package/TLS"
Unknown: raw
