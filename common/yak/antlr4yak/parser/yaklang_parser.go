// Code generated from java-escape by ANTLR 4.11.1. DO NOT EDIT.

package parser // YaklangParser

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type YaklangParser struct {
	*antlr.BaseParser
}

var yaklangparserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func yaklangparserParserInit() {
	staticData := &yaklangparserParserStaticData
	staticData.literalNames = []string{
		"", "'panic'", "'recover'", "'if'", "'elif'", "'else'", "'switch'",
		"'case'", "'default'", "'for'", "'continue'", "'break'", "'return'",
		"'include'", "'try'", "'catch'", "'finally'", "'importmod'", "'as'",
		"'export'", "'defer'", "'go'", "'range'", "", "'map'", "'chan'", "'class'",
		"'new'", "'make'", "'true'", "'false'", "'in'", "'not'", "'assert'",
		"'var'", "", "'undefined'", "'fallthrough'", "'nil'", "", "", "'*'",
		"'/'", "'%'", "'<<'", "'<'", "'>>'", "'>'", "'&'", "'&^'", "'+'", "'-'",
		"'^'", "'|'", "'=='", "'<='", "'>='", "'!='", "'<-'", "'&&'", "'||'",
		"'?'", "':'", "'['", "']'", "'('", "')'", "'{'", "", "'}'", "','", "'='",
		"'~'", "':='", "'++'", "'--'", "'+='", "'-='", "'*='", "'/='", "'%='",
		"'^='", "'<<='", "'>>='", "'&='", "'|='", "'&^='", "';'", "'...'", "'=>'",
		"'<>'", "'!'", "'.'", "", "'/*'", "'*/'", "'`'", "", "", "'\\n'",
	}
	staticData.symbolicNames = []string{
		"", "Panic", "Recover", "If", "Elif", "Else", "Switch", "Case", "Default",
		"For", "Continue", "Break", "Return", "Include", "Try", "Catch", "Finally",
		"Importmod", "As", "Export", "Defer", "Go", "Range", "Func", "Map",
		"Chan", "Class", "New", "Make", "True", "False", "In", "NotLiteral",
		"Assert", "Var", "VarTypeName", "UndefinedLiteral", "Fallthrough", "NilLiteral",
		"Identifier", "IdentifierWithDollar", "Mul", "Div", "Mod", "LtLt", "Lt",
		"GtGt", "Gt", "Amp", "AmpNot", "Plus", "Sub", "Xor", "Xand", "Eq", "LtEq",
		"GtEq", "Neq", "ChanIn", "LogicAnd", "LogicOr", "Question", "Colon",
		"LBracket", "RBracket", "LParen", "RParen", "LBrace", "TemplateCloseBrace",
		"RBrace", "Comma", "AssignEq", "Wavy", "ColonAssignEq", "PlusPlus",
		"SubSub", "PlusEq", "MinusEq", "MulEq", "DivEq", "ModEq", "BitOrEq",
		"LtLtEq", "GtGtEq", "AmpEq", "BitAndEq", "BitAndNotEq", "SemiColon",
		"Ellipsis", "EqGt", "LtGt", "Not", "Dot", "WS", "CommentStart", "CommentEnd",
		"BackTickL", "COMMENT", "LINE_COMMENT", "LF", "EOS", "IntegerLiteral",
		"FloatLiteral", "TemplateSingleQuoteStringStart", "TemplateDoubleQuoteStringStart",
		"TemplateBackTickStringStart", "StringLiteral", "CharacterLiteral",
		"TemplateSingleQuoteStringCharacterStringEnd", "TemplateSingleQuoteStringCharacter",
		"TemplateSingleQuoteStringStartExpression", "TemplateDoubleQuoteStringCharacterStringEnd",
		"TemplateDoubleQuoteStringCharacter", "TemplateDoubleQuoteStringStartExpression",
		"TemplateBackTickStringCharacterStringEnd", "TemplateBackTickStringCharacter",
		"TemplateBackTickStringStartExpression",
	}
	staticData.ruleNames = []string{
		"program", "statementList", "statement", "tryStmt", "expressionStmt",
		"assignExpressionStmt", "includeStmt", "deferStmt", "goStmt", "assertStmt",
		"fallthroughStmt", "breakStmt", "continueStmt", "returnStmt", "forStmt",
		"forStmtCond", "forFirstExpr", "forThirdExpr", "forRangeStmt", "switchStmt",
		"ifStmt", "elseBlock", "block", "empty", "inplaceAssignOperator", "assignExpression",
		"declareVariableExpressionStmt", "declareVariableExpression", "declareVariableOnly",
		"declareAndAssignExpression", "leftExpressionList", "unaryOperator",
		"bitBinaryOperator", "additiveBinaryOperator", "multiplicativeBinaryOperator",
		"comparisonBinaryOperator", "leftExpression", "leftMemberCall", "leftSliceCall",
		"expression", "parenExpression", "makeExpression", "typeLiteral", "sliceTypeLiteral",
		"mapTypeLiteral", "instanceCode", "anonymousFunctionDecl", "functionNameDecl",
		"functionParamDecl", "functionCall", "ordinaryArguments", "memberCall",
		"sliceCall", "literal", "numericLiteral", "stringLiteral", "templateSingleQuoteStringLiteral",
		"templateDoubleQuoteStringLiteral", "templateBackTickStringLiteral",
		"templateStringLiteral", "templateSingleQuoteStringAtom", "templateDoubleQuoteStringAtom",
		"templateBackTickStringAtom", "boolLiteral", "characterLiteral", "sliceLiteral",
		"sliceTypedLiteral", "expressionList", "expressionListMultiline", "mapLiteral",
		"mapTypedLiteral", "mapPairs", "mapPair", "ws", "eos",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 116, 1038, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2,
		68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73,
		7, 73, 2, 74, 7, 74, 1, 0, 5, 0, 152, 8, 0, 10, 0, 12, 0, 155, 9, 0, 1,
		0, 1, 0, 1, 0, 1, 1, 4, 1, 161, 8, 1, 11, 1, 12, 1, 162, 1, 2, 1, 2, 1,
		2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
		2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
		2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
		2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 209, 8, 2, 1, 3, 1, 3, 1, 3, 1,
		3, 3, 3, 215, 8, 3, 1, 3, 1, 3, 1, 3, 3, 3, 220, 8, 3, 1, 4, 1, 4, 1, 5,
		1, 5, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8,
		3, 8, 237, 8, 8, 1, 9, 1, 9, 1, 9, 1, 9, 5, 9, 243, 8, 9, 10, 9, 12, 9,
		246, 9, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 3, 13,
		256, 8, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 265,
		8, 14, 1, 14, 1, 14, 1, 15, 3, 15, 270, 8, 15, 1, 15, 1, 15, 3, 15, 274,
		8, 15, 1, 15, 1, 15, 3, 15, 278, 8, 15, 1, 16, 1, 16, 3, 16, 282, 8, 16,
		1, 17, 1, 17, 3, 17, 286, 8, 17, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 292,
		8, 18, 1, 18, 1, 18, 3, 18, 296, 8, 18, 1, 18, 3, 18, 299, 8, 18, 1, 18,
		1, 18, 1, 18, 1, 19, 1, 19, 3, 19, 306, 8, 19, 1, 19, 1, 19, 5, 19, 310,
		8, 19, 10, 19, 12, 19, 313, 9, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 319,
		8, 19, 5, 19, 321, 8, 19, 10, 19, 12, 19, 324, 9, 19, 1, 19, 5, 19, 327,
		8, 19, 10, 19, 12, 19, 330, 9, 19, 1, 19, 1, 19, 1, 19, 3, 19, 335, 8,
		19, 3, 19, 337, 8, 19, 1, 19, 5, 19, 340, 8, 19, 10, 19, 12, 19, 343, 9,
		19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 5, 20,
		354, 8, 20, 10, 20, 12, 20, 357, 9, 20, 1, 20, 3, 20, 360, 8, 20, 1, 21,
		1, 21, 1, 21, 3, 21, 365, 8, 21, 1, 22, 1, 22, 5, 22, 369, 8, 22, 10, 22,
		12, 22, 372, 9, 22, 1, 22, 3, 22, 375, 8, 22, 1, 22, 5, 22, 378, 8, 22,
		10, 22, 12, 22, 381, 9, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 3, 23, 388,
		8, 23, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1,
		25, 1, 25, 1, 25, 1, 25, 3, 25, 403, 8, 25, 1, 26, 1, 26, 1, 27, 1, 27,
		3, 27, 409, 8, 27, 1, 28, 1, 28, 1, 28, 1, 28, 5, 28, 415, 8, 28, 10, 28,
		12, 28, 418, 9, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1,
		30, 5, 30, 428, 8, 30, 10, 30, 12, 30, 431, 9, 30, 1, 31, 1, 31, 1, 32,
		1, 32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 3,
		36, 446, 8, 36, 1, 36, 3, 36, 449, 8, 36, 1, 37, 1, 37, 1, 37, 1, 38, 1,
		38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 5, 39, 462, 8, 39, 10, 39,
		12, 39, 465, 9, 39, 1, 39, 3, 39, 468, 8, 39, 1, 39, 5, 39, 471, 8, 39,
		10, 39, 12, 39, 474, 9, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1,
		39, 5, 39, 483, 8, 39, 10, 39, 12, 39, 486, 9, 39, 1, 39, 1, 39, 5, 39,
		490, 8, 39, 10, 39, 12, 39, 493, 9, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1,
		39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 3, 39, 507, 8, 39,
		1, 39, 1, 39, 1, 39, 5, 39, 512, 8, 39, 10, 39, 12, 39, 515, 9, 39, 1,
		39, 1, 39, 1, 39, 1, 39, 1, 39, 5, 39, 522, 8, 39, 10, 39, 12, 39, 525,
		9, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 5, 39, 532, 8, 39, 10, 39, 12,
		39, 535, 9, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 5, 39, 542, 8, 39, 10,
		39, 12, 39, 545, 9, 39, 1, 39, 1, 39, 1, 39, 1, 39, 3, 39, 551, 8, 39,
		1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 5, 39, 558, 8, 39, 10, 39, 12, 39, 561,
		9, 39, 1, 39, 1, 39, 1, 39, 1, 39, 5, 39, 567, 8, 39, 10, 39, 12, 39, 570,
		9, 39, 1, 39, 1, 39, 1, 39, 1, 39, 5, 39, 576, 8, 39, 10, 39, 12, 39, 579,
		9, 39, 1, 39, 1, 39, 5, 39, 583, 8, 39, 10, 39, 12, 39, 586, 9, 39, 1,
		39, 1, 39, 5, 39, 590, 8, 39, 10, 39, 12, 39, 593, 9, 39, 1, 39, 1, 39,
		1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 3, 39, 604, 8, 39, 5,
		39, 606, 8, 39, 10, 39, 12, 39, 609, 9, 39, 1, 40, 1, 40, 3, 40, 613, 8,
		40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 5, 41, 620, 8, 41, 10, 41, 12, 41,
		623, 9, 41, 1, 41, 1, 41, 1, 41, 5, 41, 628, 8, 41, 10, 41, 12, 41, 631,
		9, 41, 1, 41, 3, 41, 634, 8, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1,
		42, 1, 42, 1, 42, 3, 42, 644, 8, 42, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44,
		1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 3,
		46, 661, 8, 46, 1, 46, 1, 46, 3, 46, 665, 8, 46, 1, 46, 1, 46, 1, 46, 1,
		46, 3, 46, 671, 8, 46, 1, 46, 1, 46, 3, 46, 675, 8, 46, 1, 46, 1, 46, 1,
		46, 3, 46, 680, 8, 46, 3, 46, 682, 8, 46, 1, 47, 1, 47, 1, 48, 5, 48, 687,
		8, 48, 10, 48, 12, 48, 690, 9, 48, 1, 48, 1, 48, 5, 48, 694, 8, 48, 10,
		48, 12, 48, 697, 9, 48, 1, 48, 1, 48, 5, 48, 701, 8, 48, 10, 48, 12, 48,
		704, 9, 48, 1, 48, 5, 48, 707, 8, 48, 10, 48, 12, 48, 710, 9, 48, 1, 48,
		3, 48, 713, 8, 48, 1, 48, 5, 48, 716, 8, 48, 10, 48, 12, 48, 719, 9, 48,
		1, 48, 3, 48, 722, 8, 48, 1, 48, 5, 48, 725, 8, 48, 10, 48, 12, 48, 728,
		9, 48, 1, 49, 1, 49, 3, 49, 732, 8, 49, 1, 49, 1, 49, 3, 49, 736, 8, 49,
		1, 50, 5, 50, 739, 8, 50, 10, 50, 12, 50, 742, 9, 50, 1, 50, 1, 50, 5,
		50, 746, 8, 50, 10, 50, 12, 50, 749, 9, 50, 1, 50, 1, 50, 5, 50, 753, 8,
		50, 10, 50, 12, 50, 756, 9, 50, 1, 50, 5, 50, 759, 8, 50, 10, 50, 12, 50,
		762, 9, 50, 1, 50, 3, 50, 765, 8, 50, 1, 50, 5, 50, 768, 8, 50, 10, 50,
		12, 50, 771, 9, 50, 1, 50, 3, 50, 774, 8, 50, 1, 50, 5, 50, 777, 8, 50,
		10, 50, 12, 50, 780, 9, 50, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 3, 52, 787,
		8, 52, 1, 52, 1, 52, 3, 52, 791, 8, 52, 1, 52, 1, 52, 3, 52, 795, 8, 52,
		1, 52, 1, 52, 1, 52, 3, 52, 800, 8, 52, 1, 52, 1, 52, 3, 52, 804, 8, 52,
		1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 811, 8, 52, 1, 53, 1, 53, 1,
		53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 824,
		8, 53, 1, 54, 1, 54, 1, 55, 1, 55, 1, 56, 1, 56, 5, 56, 832, 8, 56, 10,
		56, 12, 56, 835, 9, 56, 1, 56, 1, 56, 1, 57, 1, 57, 5, 57, 841, 8, 57,
		10, 57, 12, 57, 844, 9, 57, 1, 57, 1, 57, 1, 58, 1, 58, 5, 58, 850, 8,
		58, 10, 58, 12, 58, 853, 9, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 3, 59,
		860, 8, 59, 1, 60, 4, 60, 863, 8, 60, 11, 60, 12, 60, 864, 1, 60, 1, 60,
		1, 60, 1, 60, 3, 60, 871, 8, 60, 1, 61, 4, 61, 874, 8, 61, 11, 61, 12,
		61, 875, 1, 61, 1, 61, 1, 61, 1, 61, 3, 61, 882, 8, 61, 1, 62, 4, 62, 885,
		8, 62, 11, 62, 12, 62, 886, 1, 62, 1, 62, 1, 62, 1, 62, 3, 62, 893, 8,
		62, 1, 63, 1, 63, 1, 64, 1, 64, 1, 65, 1, 65, 5, 65, 901, 8, 65, 10, 65,
		12, 65, 904, 9, 65, 1, 65, 3, 65, 907, 8, 65, 1, 65, 5, 65, 910, 8, 65,
		10, 65, 12, 65, 913, 9, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 66, 5, 66, 920,
		8, 66, 10, 66, 12, 66, 923, 9, 66, 1, 66, 3, 66, 926, 8, 66, 1, 66, 5,
		66, 929, 8, 66, 10, 66, 12, 66, 932, 9, 66, 1, 66, 1, 66, 1, 67, 1, 67,
		1, 67, 5, 67, 939, 8, 67, 10, 67, 12, 67, 942, 9, 67, 1, 67, 3, 67, 945,
		8, 67, 1, 68, 1, 68, 1, 68, 5, 68, 950, 8, 68, 10, 68, 12, 68, 953, 9,
		68, 1, 68, 5, 68, 956, 8, 68, 10, 68, 12, 68, 959, 9, 68, 1, 68, 3, 68,
		962, 8, 68, 1, 69, 1, 69, 1, 69, 5, 69, 967, 8, 69, 10, 69, 12, 69, 970,
		9, 69, 1, 69, 3, 69, 973, 8, 69, 1, 69, 5, 69, 976, 8, 69, 10, 69, 12,
		69, 979, 9, 69, 1, 69, 3, 69, 982, 8, 69, 1, 70, 1, 70, 1, 70, 5, 70, 987,
		8, 70, 10, 70, 12, 70, 990, 9, 70, 1, 70, 3, 70, 993, 8, 70, 1, 70, 5,
		70, 996, 8, 70, 10, 70, 12, 70, 999, 9, 70, 1, 70, 1, 70, 1, 71, 1, 71,
		1, 71, 5, 71, 1006, 8, 71, 10, 71, 12, 71, 1009, 9, 71, 1, 71, 5, 71, 1012,
		8, 71, 10, 71, 12, 71, 1015, 9, 71, 1, 71, 3, 71, 1018, 8, 71, 1, 72, 1,
		72, 1, 72, 1, 72, 1, 73, 4, 73, 1025, 8, 73, 11, 73, 12, 73, 1026, 1, 74,
		1, 74, 4, 74, 1031, 8, 74, 11, 74, 12, 74, 1032, 1, 74, 3, 74, 1036, 8,
		74, 1, 74, 0, 1, 78, 75, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24,
		26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60,
		62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96,
		98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126,
		128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 0, 11, 2, 0, 71,
		71, 73, 73, 1, 0, 76, 86, 1, 0, 74, 75, 5, 0, 41, 41, 48, 48, 50, 52, 58,
		58, 91, 91, 4, 0, 44, 44, 46, 46, 48, 49, 52, 53, 1, 0, 50, 51, 1, 0, 41,
		43, 4, 0, 45, 45, 47, 47, 54, 57, 90, 90, 1, 0, 39, 40, 1, 0, 101, 102,
		1, 0, 29, 30, 1141, 0, 153, 1, 0, 0, 0, 2, 160, 1, 0, 0, 0, 4, 208, 1,
		0, 0, 0, 6, 210, 1, 0, 0, 0, 8, 221, 1, 0, 0, 0, 10, 223, 1, 0, 0, 0, 12,
		225, 1, 0, 0, 0, 14, 228, 1, 0, 0, 0, 16, 231, 1, 0, 0, 0, 18, 238, 1,
		0, 0, 0, 20, 247, 1, 0, 0, 0, 22, 249, 1, 0, 0, 0, 24, 251, 1, 0, 0, 0,
		26, 253, 1, 0, 0, 0, 28, 257, 1, 0, 0, 0, 30, 269, 1, 0, 0, 0, 32, 281,
		1, 0, 0, 0, 34, 285, 1, 0, 0, 0, 36, 287, 1, 0, 0, 0, 38, 303, 1, 0, 0,
		0, 40, 346, 1, 0, 0, 0, 42, 361, 1, 0, 0, 0, 44, 366, 1, 0, 0, 0, 46, 387,
		1, 0, 0, 0, 48, 389, 1, 0, 0, 0, 50, 402, 1, 0, 0, 0, 52, 404, 1, 0, 0,
		0, 54, 408, 1, 0, 0, 0, 56, 410, 1, 0, 0, 0, 58, 419, 1, 0, 0, 0, 60, 424,
		1, 0, 0, 0, 62, 432, 1, 0, 0, 0, 64, 434, 1, 0, 0, 0, 66, 436, 1, 0, 0,
		0, 68, 438, 1, 0, 0, 0, 70, 440, 1, 0, 0, 0, 72, 448, 1, 0, 0, 0, 74, 450,
		1, 0, 0, 0, 76, 453, 1, 0, 0, 0, 78, 506, 1, 0, 0, 0, 80, 610, 1, 0, 0,
		0, 82, 616, 1, 0, 0, 0, 84, 643, 1, 0, 0, 0, 86, 645, 1, 0, 0, 0, 88, 649,
		1, 0, 0, 0, 90, 655, 1, 0, 0, 0, 92, 681, 1, 0, 0, 0, 94, 683, 1, 0, 0,
		0, 96, 688, 1, 0, 0, 0, 98, 729, 1, 0, 0, 0, 100, 740, 1, 0, 0, 0, 102,
		781, 1, 0, 0, 0, 104, 810, 1, 0, 0, 0, 106, 823, 1, 0, 0, 0, 108, 825,
		1, 0, 0, 0, 110, 827, 1, 0, 0, 0, 112, 829, 1, 0, 0, 0, 114, 838, 1, 0,
		0, 0, 116, 847, 1, 0, 0, 0, 118, 859, 1, 0, 0, 0, 120, 870, 1, 0, 0, 0,
		122, 881, 1, 0, 0, 0, 124, 892, 1, 0, 0, 0, 126, 894, 1, 0, 0, 0, 128,
		896, 1, 0, 0, 0, 130, 898, 1, 0, 0, 0, 132, 916, 1, 0, 0, 0, 134, 935,
		1, 0, 0, 0, 136, 946, 1, 0, 0, 0, 138, 981, 1, 0, 0, 0, 140, 983, 1, 0,
		0, 0, 142, 1002, 1, 0, 0, 0, 144, 1019, 1, 0, 0, 0, 146, 1024, 1, 0, 0,
		0, 148, 1035, 1, 0, 0, 0, 150, 152, 3, 146, 73, 0, 151, 150, 1, 0, 0, 0,
		152, 155, 1, 0, 0, 0, 153, 151, 1, 0, 0, 0, 153, 154, 1, 0, 0, 0, 154,
		156, 1, 0, 0, 0, 155, 153, 1, 0, 0, 0, 156, 157, 3, 2, 1, 0, 157, 158,
		5, 0, 0, 1, 158, 1, 1, 0, 0, 0, 159, 161, 3, 4, 2, 0, 160, 159, 1, 0, 0,
		0, 161, 162, 1, 0, 0, 0, 162, 160, 1, 0, 0, 0, 162, 163, 1, 0, 0, 0, 163,
		3, 1, 0, 0, 0, 164, 165, 3, 52, 26, 0, 165, 166, 3, 148, 74, 0, 166, 209,
		1, 0, 0, 0, 167, 168, 3, 10, 5, 0, 168, 169, 3, 148, 74, 0, 169, 209, 1,
		0, 0, 0, 170, 171, 3, 8, 4, 0, 171, 172, 3, 148, 74, 0, 172, 209, 1, 0,
		0, 0, 173, 174, 3, 44, 22, 0, 174, 175, 3, 148, 74, 0, 175, 209, 1, 0,
		0, 0, 176, 177, 3, 6, 3, 0, 177, 178, 3, 148, 74, 0, 178, 209, 1, 0, 0,
		0, 179, 209, 3, 46, 23, 0, 180, 209, 3, 40, 20, 0, 181, 209, 3, 38, 19,
		0, 182, 209, 3, 36, 18, 0, 183, 209, 3, 28, 14, 0, 184, 185, 3, 22, 11,
		0, 185, 186, 3, 148, 74, 0, 186, 209, 1, 0, 0, 0, 187, 188, 3, 26, 13,
		0, 188, 189, 3, 148, 74, 0, 189, 209, 1, 0, 0, 0, 190, 191, 3, 24, 12,
		0, 191, 192, 3, 148, 74, 0, 192, 209, 1, 0, 0, 0, 193, 194, 3, 20, 10,
		0, 194, 195, 3, 148, 74, 0, 195, 209, 1, 0, 0, 0, 196, 197, 3, 12, 6, 0,
		197, 198, 3, 148, 74, 0, 198, 209, 1, 0, 0, 0, 199, 200, 3, 14, 7, 0, 200,
		201, 3, 148, 74, 0, 201, 209, 1, 0, 0, 0, 202, 203, 3, 16, 8, 0, 203, 204,
		3, 148, 74, 0, 204, 209, 1, 0, 0, 0, 205, 206, 3, 18, 9, 0, 206, 207, 3,
		148, 74, 0, 207, 209, 1, 0, 0, 0, 208, 164, 1, 0, 0, 0, 208, 167, 1, 0,
		0, 0, 208, 170, 1, 0, 0, 0, 208, 173, 1, 0, 0, 0, 208, 176, 1, 0, 0, 0,
		208, 179, 1, 0, 0, 0, 208, 180, 1, 0, 0, 0, 208, 181, 1, 0, 0, 0, 208,
		182, 1, 0, 0, 0, 208, 183, 1, 0, 0, 0, 208, 184, 1, 0, 0, 0, 208, 187,
		1, 0, 0, 0, 208, 190, 1, 0, 0, 0, 208, 193, 1, 0, 0, 0, 208, 196, 1, 0,
		0, 0, 208, 199, 1, 0, 0, 0, 208, 202, 1, 0, 0, 0, 208, 205, 1, 0, 0, 0,
		209, 5, 1, 0, 0, 0, 210, 211, 5, 14, 0, 0, 211, 212, 3, 44, 22, 0, 212,
		214, 5, 15, 0, 0, 213, 215, 5, 39, 0, 0, 214, 213, 1, 0, 0, 0, 214, 215,
		1, 0, 0, 0, 215, 216, 1, 0, 0, 0, 216, 219, 3, 44, 22, 0, 217, 218, 5,
		16, 0, 0, 218, 220, 3, 44, 22, 0, 219, 217, 1, 0, 0, 0, 219, 220, 1, 0,
		0, 0, 220, 7, 1, 0, 0, 0, 221, 222, 3, 78, 39, 0, 222, 9, 1, 0, 0, 0, 223,
		224, 3, 50, 25, 0, 224, 11, 1, 0, 0, 0, 225, 226, 5, 13, 0, 0, 226, 227,
		5, 106, 0, 0, 227, 13, 1, 0, 0, 0, 228, 229, 5, 20, 0, 0, 229, 230, 3,
		78, 39, 0, 230, 15, 1, 0, 0, 0, 231, 236, 5, 21, 0, 0, 232, 233, 3, 78,
		39, 0, 233, 234, 3, 98, 49, 0, 234, 237, 1, 0, 0, 0, 235, 237, 3, 90, 45,
		0, 236, 232, 1, 0, 0, 0, 236, 235, 1, 0, 0, 0, 237, 17, 1, 0, 0, 0, 238,
		239, 5, 33, 0, 0, 239, 244, 3, 78, 39, 0, 240, 241, 5, 70, 0, 0, 241, 243,
		3, 78, 39, 0, 242, 240, 1, 0, 0, 0, 243, 246, 1, 0, 0, 0, 244, 242, 1,
		0, 0, 0, 244, 245, 1, 0, 0, 0, 245, 19, 1, 0, 0, 0, 246, 244, 1, 0, 0,
		0, 247, 248, 5, 37, 0, 0, 248, 21, 1, 0, 0, 0, 249, 250, 5, 11, 0, 0, 250,
		23, 1, 0, 0, 0, 251, 252, 5, 10, 0, 0, 252, 25, 1, 0, 0, 0, 253, 255, 5,
		12, 0, 0, 254, 256, 3, 134, 67, 0, 255, 254, 1, 0, 0, 0, 255, 256, 1, 0,
		0, 0, 256, 27, 1, 0, 0, 0, 257, 264, 5, 9, 0, 0, 258, 265, 3, 30, 15, 0,
		259, 260, 5, 65, 0, 0, 260, 261, 3, 30, 15, 0, 261, 262, 5, 66, 0, 0, 262,
		265, 1, 0, 0, 0, 263, 265, 3, 78, 39, 0, 264, 258, 1, 0, 0, 0, 264, 259,
		1, 0, 0, 0, 264, 263, 1, 0, 0, 0, 264, 265, 1, 0, 0, 0, 265, 266, 1, 0,
		0, 0, 266, 267, 3, 44, 22, 0, 267, 29, 1, 0, 0, 0, 268, 270, 3, 32, 16,
		0, 269, 268, 1, 0, 0, 0, 269, 270, 1, 0, 0, 0, 270, 271, 1, 0, 0, 0, 271,
		273, 5, 87, 0, 0, 272, 274, 3, 78, 39, 0, 273, 272, 1, 0, 0, 0, 273, 274,
		1, 0, 0, 0, 274, 275, 1, 0, 0, 0, 275, 277, 5, 87, 0, 0, 276, 278, 3, 34,
		17, 0, 277, 276, 1, 0, 0, 0, 277, 278, 1, 0, 0, 0, 278, 31, 1, 0, 0, 0,
		279, 282, 3, 50, 25, 0, 280, 282, 3, 78, 39, 0, 281, 279, 1, 0, 0, 0, 281,
		280, 1, 0, 0, 0, 282, 33, 1, 0, 0, 0, 283, 286, 3, 50, 25, 0, 284, 286,
		3, 78, 39, 0, 285, 283, 1, 0, 0, 0, 285, 284, 1, 0, 0, 0, 286, 35, 1, 0,
		0, 0, 287, 298, 5, 9, 0, 0, 288, 289, 3, 60, 30, 0, 289, 290, 7, 0, 0,
		0, 290, 292, 1, 0, 0, 0, 291, 288, 1, 0, 0, 0, 291, 292, 1, 0, 0, 0, 292,
		293, 1, 0, 0, 0, 293, 299, 5, 22, 0, 0, 294, 296, 3, 60, 30, 0, 295, 294,
		1, 0, 0, 0, 295, 296, 1, 0, 0, 0, 296, 297, 1, 0, 0, 0, 297, 299, 5, 31,
		0, 0, 298, 291, 1, 0, 0, 0, 298, 295, 1, 0, 0, 0, 299, 300, 1, 0, 0, 0,
		300, 301, 3, 78, 39, 0, 301, 302, 3, 44, 22, 0, 302, 37, 1, 0, 0, 0, 303,
		305, 5, 6, 0, 0, 304, 306, 3, 78, 39, 0, 305, 304, 1, 0, 0, 0, 305, 306,
		1, 0, 0, 0, 306, 307, 1, 0, 0, 0, 307, 322, 5, 67, 0, 0, 308, 310, 3, 146,
		73, 0, 309, 308, 1, 0, 0, 0, 310, 313, 1, 0, 0, 0, 311, 309, 1, 0, 0, 0,
		311, 312, 1, 0, 0, 0, 312, 314, 1, 0, 0, 0, 313, 311, 1, 0, 0, 0, 314,
		315, 5, 7, 0, 0, 315, 316, 3, 134, 67, 0, 316, 318, 5, 62, 0, 0, 317, 319,
		3, 2, 1, 0, 318, 317, 1, 0, 0, 0, 318, 319, 1, 0, 0, 0, 319, 321, 1, 0,
		0, 0, 320, 311, 1, 0, 0, 0, 321, 324, 1, 0, 0, 0, 322, 320, 1, 0, 0, 0,
		322, 323, 1, 0, 0, 0, 323, 336, 1, 0, 0, 0, 324, 322, 1, 0, 0, 0, 325,
		327, 3, 146, 73, 0, 326, 325, 1, 0, 0, 0, 327, 330, 1, 0, 0, 0, 328, 326,
		1, 0, 0, 0, 328, 329, 1, 0, 0, 0, 329, 331, 1, 0, 0, 0, 330, 328, 1, 0,
		0, 0, 331, 332, 5, 8, 0, 0, 332, 334, 5, 62, 0, 0, 333, 335, 3, 2, 1, 0,
		334, 333, 1, 0, 0, 0, 334, 335, 1, 0, 0, 0, 335, 337, 1, 0, 0, 0, 336,
		328, 1, 0, 0, 0, 336, 337, 1, 0, 0, 0, 337, 341, 1, 0, 0, 0, 338, 340,
		3, 146, 73, 0, 339, 338, 1, 0, 0, 0, 340, 343, 1, 0, 0, 0, 341, 339, 1,
		0, 0, 0, 341, 342, 1, 0, 0, 0, 342, 344, 1, 0, 0, 0, 343, 341, 1, 0, 0,
		0, 344, 345, 5, 69, 0, 0, 345, 39, 1, 0, 0, 0, 346, 347, 5, 3, 0, 0, 347,
		348, 3, 78, 39, 0, 348, 355, 3, 44, 22, 0, 349, 350, 5, 4, 0, 0, 350, 351,
		3, 78, 39, 0, 351, 352, 3, 44, 22, 0, 352, 354, 1, 0, 0, 0, 353, 349, 1,
		0, 0, 0, 354, 357, 1, 0, 0, 0, 355, 353, 1, 0, 0, 0, 355, 356, 1, 0, 0,
		0, 356, 359, 1, 0, 0, 0, 357, 355, 1, 0, 0, 0, 358, 360, 3, 42, 21, 0,
		359, 358, 1, 0, 0, 0, 359, 360, 1, 0, 0, 0, 360, 41, 1, 0, 0, 0, 361, 364,
		5, 5, 0, 0, 362, 365, 3, 40, 20, 0, 363, 365, 3, 44, 22, 0, 364, 362, 1,
		0, 0, 0, 364, 363, 1, 0, 0, 0, 365, 43, 1, 0, 0, 0, 366, 370, 5, 67, 0,
		0, 367, 369, 3, 146, 73, 0, 368, 367, 1, 0, 0, 0, 369, 372, 1, 0, 0, 0,
		370, 368, 1, 0, 0, 0, 370, 371, 1, 0, 0, 0, 371, 374, 1, 0, 0, 0, 372,
		370, 1, 0, 0, 0, 373, 375, 3, 2, 1, 0, 374, 373, 1, 0, 0, 0, 374, 375,
		1, 0, 0, 0, 375, 379, 1, 0, 0, 0, 376, 378, 3, 146, 73, 0, 377, 376, 1,
		0, 0, 0, 378, 381, 1, 0, 0, 0, 379, 377, 1, 0, 0, 0, 379, 380, 1, 0, 0,
		0, 380, 382, 1, 0, 0, 0, 381, 379, 1, 0, 0, 0, 382, 383, 5, 69, 0, 0, 383,
		45, 1, 0, 0, 0, 384, 388, 5, 100, 0, 0, 385, 388, 5, 87, 0, 0, 386, 388,
		3, 146, 73, 0, 387, 384, 1, 0, 0, 0, 387, 385, 1, 0, 0, 0, 387, 386, 1,
		0, 0, 0, 388, 47, 1, 0, 0, 0, 389, 390, 7, 1, 0, 0, 390, 49, 1, 0, 0, 0,
		391, 392, 3, 60, 30, 0, 392, 393, 7, 0, 0, 0, 393, 394, 3, 134, 67, 0,
		394, 403, 1, 0, 0, 0, 395, 396, 3, 72, 36, 0, 396, 397, 7, 2, 0, 0, 397,
		403, 1, 0, 0, 0, 398, 399, 3, 72, 36, 0, 399, 400, 3, 48, 24, 0, 400, 401,
		3, 78, 39, 0, 401, 403, 1, 0, 0, 0, 402, 391, 1, 0, 0, 0, 402, 395, 1,
		0, 0, 0, 402, 398, 1, 0, 0, 0, 403, 51, 1, 0, 0, 0, 404, 405, 3, 54, 27,
		0, 405, 53, 1, 0, 0, 0, 406, 409, 3, 56, 28, 0, 407, 409, 3, 58, 29, 0,
		408, 406, 1, 0, 0, 0, 408, 407, 1, 0, 0, 0, 409, 55, 1, 0, 0, 0, 410, 411,
		5, 34, 0, 0, 411, 416, 5, 39, 0, 0, 412, 413, 5, 70, 0, 0, 413, 415, 5,
		39, 0, 0, 414, 412, 1, 0, 0, 0, 415, 418, 1, 0, 0, 0, 416, 414, 1, 0, 0,
		0, 416, 417, 1, 0, 0, 0, 417, 57, 1, 0, 0, 0, 418, 416, 1, 0, 0, 0, 419,
		420, 5, 34, 0, 0, 420, 421, 3, 60, 30, 0, 421, 422, 7, 0, 0, 0, 422, 423,
		3, 134, 67, 0, 423, 59, 1, 0, 0, 0, 424, 429, 3, 72, 36, 0, 425, 426, 5,
		70, 0, 0, 426, 428, 3, 72, 36, 0, 427, 425, 1, 0, 0, 0, 428, 431, 1, 0,
		0, 0, 429, 427, 1, 0, 0, 0, 429, 430, 1, 0, 0, 0, 430, 61, 1, 0, 0, 0,
		431, 429, 1, 0, 0, 0, 432, 433, 7, 3, 0, 0, 433, 63, 1, 0, 0, 0, 434, 435,
		7, 4, 0, 0, 435, 65, 1, 0, 0, 0, 436, 437, 7, 5, 0, 0, 437, 67, 1, 0, 0,
		0, 438, 439, 7, 6, 0, 0, 439, 69, 1, 0, 0, 0, 440, 441, 7, 7, 0, 0, 441,
		71, 1, 0, 0, 0, 442, 445, 3, 78, 39, 0, 443, 446, 3, 74, 37, 0, 444, 446,
		3, 76, 38, 0, 445, 443, 1, 0, 0, 0, 445, 444, 1, 0, 0, 0, 446, 449, 1,
		0, 0, 0, 447, 449, 5, 39, 0, 0, 448, 442, 1, 0, 0, 0, 448, 447, 1, 0, 0,
		0, 449, 73, 1, 0, 0, 0, 450, 451, 5, 92, 0, 0, 451, 452, 7, 8, 0, 0, 452,
		75, 1, 0, 0, 0, 453, 454, 5, 63, 0, 0, 454, 455, 3, 78, 39, 0, 455, 456,
		5, 64, 0, 0, 456, 77, 1, 0, 0, 0, 457, 458, 6, 39, -1, 0, 458, 459, 3,
		84, 42, 0, 459, 463, 5, 65, 0, 0, 460, 462, 3, 146, 73, 0, 461, 460, 1,
		0, 0, 0, 462, 465, 1, 0, 0, 0, 463, 461, 1, 0, 0, 0, 463, 464, 1, 0, 0,
		0, 464, 467, 1, 0, 0, 0, 465, 463, 1, 0, 0, 0, 466, 468, 3, 78, 39, 0,
		467, 466, 1, 0, 0, 0, 467, 468, 1, 0, 0, 0, 468, 472, 1, 0, 0, 0, 469,
		471, 3, 146, 73, 0, 470, 469, 1, 0, 0, 0, 471, 474, 1, 0, 0, 0, 472, 470,
		1, 0, 0, 0, 472, 473, 1, 0, 0, 0, 473, 475, 1, 0, 0, 0, 474, 472, 1, 0,
		0, 0, 475, 476, 5, 66, 0, 0, 476, 507, 1, 0, 0, 0, 477, 507, 3, 106, 53,
		0, 478, 507, 3, 92, 46, 0, 479, 480, 5, 1, 0, 0, 480, 484, 5, 65, 0, 0,
		481, 483, 3, 146, 73, 0, 482, 481, 1, 0, 0, 0, 483, 486, 1, 0, 0, 0, 484,
		482, 1, 0, 0, 0, 484, 485, 1, 0, 0, 0, 485, 487, 1, 0, 0, 0, 486, 484,
		1, 0, 0, 0, 487, 491, 3, 78, 39, 0, 488, 490, 3, 146, 73, 0, 489, 488,
		1, 0, 0, 0, 490, 493, 1, 0, 0, 0, 491, 489, 1, 0, 0, 0, 491, 492, 1, 0,
		0, 0, 492, 494, 1, 0, 0, 0, 493, 491, 1, 0, 0, 0, 494, 495, 5, 66, 0, 0,
		495, 507, 1, 0, 0, 0, 496, 497, 5, 2, 0, 0, 497, 498, 5, 65, 0, 0, 498,
		507, 5, 66, 0, 0, 499, 507, 5, 39, 0, 0, 500, 507, 3, 80, 40, 0, 501, 507,
		3, 90, 45, 0, 502, 507, 3, 82, 41, 0, 503, 504, 3, 62, 31, 0, 504, 505,
		3, 78, 39, 10, 505, 507, 1, 0, 0, 0, 506, 457, 1, 0, 0, 0, 506, 477, 1,
		0, 0, 0, 506, 478, 1, 0, 0, 0, 506, 479, 1, 0, 0, 0, 506, 496, 1, 0, 0,
		0, 506, 499, 1, 0, 0, 0, 506, 500, 1, 0, 0, 0, 506, 501, 1, 0, 0, 0, 506,
		502, 1, 0, 0, 0, 506, 503, 1, 0, 0, 0, 507, 607, 1, 0, 0, 0, 508, 509,
		10, 9, 0, 0, 509, 513, 3, 64, 32, 0, 510, 512, 3, 146, 73, 0, 511, 510,
		1, 0, 0, 0, 512, 515, 1, 0, 0, 0, 513, 511, 1, 0, 0, 0, 513, 514, 1, 0,
		0, 0, 514, 516, 1, 0, 0, 0, 515, 513, 1, 0, 0, 0, 516, 517, 3, 78, 39,
		10, 517, 606, 1, 0, 0, 0, 518, 519, 10, 8, 0, 0, 519, 523, 3, 68, 34, 0,
		520, 522, 3, 146, 73, 0, 521, 520, 1, 0, 0, 0, 522, 525, 1, 0, 0, 0, 523,
		521, 1, 0, 0, 0, 523, 524, 1, 0, 0, 0, 524, 526, 1, 0, 0, 0, 525, 523,
		1, 0, 0, 0, 526, 527, 3, 78, 39, 9, 527, 606, 1, 0, 0, 0, 528, 529, 10,
		7, 0, 0, 529, 533, 3, 66, 33, 0, 530, 532, 3, 146, 73, 0, 531, 530, 1,
		0, 0, 0, 532, 535, 1, 0, 0, 0, 533, 531, 1, 0, 0, 0, 533, 534, 1, 0, 0,
		0, 534, 536, 1, 0, 0, 0, 535, 533, 1, 0, 0, 0, 536, 537, 3, 78, 39, 8,
		537, 606, 1, 0, 0, 0, 538, 539, 10, 6, 0, 0, 539, 543, 3, 70, 35, 0, 540,
		542, 3, 146, 73, 0, 541, 540, 1, 0, 0, 0, 542, 545, 1, 0, 0, 0, 543, 541,
		1, 0, 0, 0, 543, 544, 1, 0, 0, 0, 544, 546, 1, 0, 0, 0, 545, 543, 1, 0,
		0, 0, 546, 547, 3, 78, 39, 7, 547, 606, 1, 0, 0, 0, 548, 550, 10, 5, 0,
		0, 549, 551, 5, 32, 0, 0, 550, 549, 1, 0, 0, 0, 550, 551, 1, 0, 0, 0, 551,
		552, 1, 0, 0, 0, 552, 553, 5, 31, 0, 0, 553, 606, 3, 78, 39, 6, 554, 555,
		10, 4, 0, 0, 555, 559, 5, 59, 0, 0, 556, 558, 3, 146, 73, 0, 557, 556,
		1, 0, 0, 0, 558, 561, 1, 0, 0, 0, 559, 557, 1, 0, 0, 0, 559, 560, 1, 0,
		0, 0, 560, 562, 1, 0, 0, 0, 561, 559, 1, 0, 0, 0, 562, 606, 3, 78, 39,
		5, 563, 564, 10, 3, 0, 0, 564, 568, 5, 60, 0, 0, 565, 567, 3, 146, 73,
		0, 566, 565, 1, 0, 0, 0, 567, 570, 1, 0, 0, 0, 568, 566, 1, 0, 0, 0, 568,
		569, 1, 0, 0, 0, 569, 571, 1, 0, 0, 0, 570, 568, 1, 0, 0, 0, 571, 606,
		3, 78, 39, 4, 572, 573, 10, 2, 0, 0, 573, 577, 5, 61, 0, 0, 574, 576, 3,
		146, 73, 0, 575, 574, 1, 0, 0, 0, 576, 579, 1, 0, 0, 0, 577, 575, 1, 0,
		0, 0, 577, 578, 1, 0, 0, 0, 578, 580, 1, 0, 0, 0, 579, 577, 1, 0, 0, 0,
		580, 584, 3, 78, 39, 0, 581, 583, 3, 146, 73, 0, 582, 581, 1, 0, 0, 0,
		583, 586, 1, 0, 0, 0, 584, 582, 1, 0, 0, 0, 584, 585, 1, 0, 0, 0, 585,
		587, 1, 0, 0, 0, 586, 584, 1, 0, 0, 0, 587, 591, 5, 62, 0, 0, 588, 590,
		3, 146, 73, 0, 589, 588, 1, 0, 0, 0, 590, 593, 1, 0, 0, 0, 591, 589, 1,
		0, 0, 0, 591, 592, 1, 0, 0, 0, 592, 594, 1, 0, 0, 0, 593, 591, 1, 0, 0,
		0, 594, 595, 3, 78, 39, 3, 595, 606, 1, 0, 0, 0, 596, 597, 10, 1, 0, 0,
		597, 598, 5, 58, 0, 0, 598, 606, 3, 78, 39, 2, 599, 603, 10, 14, 0, 0,
		600, 604, 3, 102, 51, 0, 601, 604, 3, 104, 52, 0, 602, 604, 3, 98, 49,
		0, 603, 600, 1, 0, 0, 0, 603, 601, 1, 0, 0, 0, 603, 602, 1, 0, 0, 0, 604,
		606, 1, 0, 0, 0, 605, 508, 1, 0, 0, 0, 605, 518, 1, 0, 0, 0, 605, 528,
		1, 0, 0, 0, 605, 538, 1, 0, 0, 0, 605, 548, 1, 0, 0, 0, 605, 554, 1, 0,
		0, 0, 605, 563, 1, 0, 0, 0, 605, 572, 1, 0, 0, 0, 605, 596, 1, 0, 0, 0,
		605, 599, 1, 0, 0, 0, 606, 609, 1, 0, 0, 0, 607, 605, 1, 0, 0, 0, 607,
		608, 1, 0, 0, 0, 608, 79, 1, 0, 0, 0, 609, 607, 1, 0, 0, 0, 610, 612, 5,
		65, 0, 0, 611, 613, 3, 78, 39, 0, 612, 611, 1, 0, 0, 0, 612, 613, 1, 0,
		0, 0, 613, 614, 1, 0, 0, 0, 614, 615, 5, 66, 0, 0, 615, 81, 1, 0, 0, 0,
		616, 617, 5, 28, 0, 0, 617, 621, 5, 65, 0, 0, 618, 620, 3, 146, 73, 0,
		619, 618, 1, 0, 0, 0, 620, 623, 1, 0, 0, 0, 621, 619, 1, 0, 0, 0, 621,
		622, 1, 0, 0, 0, 622, 624, 1, 0, 0, 0, 623, 621, 1, 0, 0, 0, 624, 633,
		3, 84, 42, 0, 625, 629, 5, 70, 0, 0, 626, 628, 3, 146, 73, 0, 627, 626,
		1, 0, 0, 0, 628, 631, 1, 0, 0, 0, 629, 627, 1, 0, 0, 0, 629, 630, 1, 0,
		0, 0, 630, 632, 1, 0, 0, 0, 631, 629, 1, 0, 0, 0, 632, 634, 3, 136, 68,
		0, 633, 625, 1, 0, 0, 0, 633, 634, 1, 0, 0, 0, 634, 635, 1, 0, 0, 0, 635,
		636, 5, 66, 0, 0, 636, 83, 1, 0, 0, 0, 637, 644, 5, 35, 0, 0, 638, 644,
		5, 34, 0, 0, 639, 644, 3, 86, 43, 0, 640, 644, 3, 88, 44, 0, 641, 642,
		5, 25, 0, 0, 642, 644, 3, 84, 42, 0, 643, 637, 1, 0, 0, 0, 643, 638, 1,
		0, 0, 0, 643, 639, 1, 0, 0, 0, 643, 640, 1, 0, 0, 0, 643, 641, 1, 0, 0,
		0, 644, 85, 1, 0, 0, 0, 645, 646, 5, 63, 0, 0, 646, 647, 5, 64, 0, 0, 647,
		648, 3, 84, 42, 0, 648, 87, 1, 0, 0, 0, 649, 650, 5, 24, 0, 0, 650, 651,
		5, 63, 0, 0, 651, 652, 3, 84, 42, 0, 652, 653, 5, 64, 0, 0, 653, 654, 3,
		84, 42, 0, 654, 89, 1, 0, 0, 0, 655, 656, 5, 23, 0, 0, 656, 657, 3, 44,
		22, 0, 657, 91, 1, 0, 0, 0, 658, 660, 5, 23, 0, 0, 659, 661, 3, 94, 47,
		0, 660, 659, 1, 0, 0, 0, 660, 661, 1, 0, 0, 0, 661, 662, 1, 0, 0, 0, 662,
		664, 5, 65, 0, 0, 663, 665, 3, 96, 48, 0, 664, 663, 1, 0, 0, 0, 664, 665,
		1, 0, 0, 0, 665, 666, 1, 0, 0, 0, 666, 667, 5, 66, 0, 0, 667, 682, 3, 44,
		22, 0, 668, 670, 5, 65, 0, 0, 669, 671, 3, 96, 48, 0, 670, 669, 1, 0, 0,
		0, 670, 671, 1, 0, 0, 0, 671, 672, 1, 0, 0, 0, 672, 675, 5, 66, 0, 0, 673,
		675, 5, 39, 0, 0, 674, 668, 1, 0, 0, 0, 674, 673, 1, 0, 0, 0, 675, 676,
		1, 0, 0, 0, 676, 679, 5, 89, 0, 0, 677, 680, 3, 44, 22, 0, 678, 680, 3,
		78, 39, 0, 679, 677, 1, 0, 0, 0, 679, 678, 1, 0, 0, 0, 680, 682, 1, 0,
		0, 0, 681, 658, 1, 0, 0, 0, 681, 674, 1, 0, 0, 0, 682, 93, 1, 0, 0, 0,
		683, 684, 5, 39, 0, 0, 684, 95, 1, 0, 0, 0, 685, 687, 3, 146, 73, 0, 686,
		685, 1, 0, 0, 0, 687, 690, 1, 0, 0, 0, 688, 686, 1, 0, 0, 0, 688, 689,
		1, 0, 0, 0, 689, 691, 1, 0, 0, 0, 690, 688, 1, 0, 0, 0, 691, 708, 5, 39,
		0, 0, 692, 694, 3, 146, 73, 0, 693, 692, 1, 0, 0, 0, 694, 697, 1, 0, 0,
		0, 695, 693, 1, 0, 0, 0, 695, 696, 1, 0, 0, 0, 696, 698, 1, 0, 0, 0, 697,
		695, 1, 0, 0, 0, 698, 702, 5, 70, 0, 0, 699, 701, 3, 146, 73, 0, 700, 699,
		1, 0, 0, 0, 701, 704, 1, 0, 0, 0, 702, 700, 1, 0, 0, 0, 702, 703, 1, 0,
		0, 0, 703, 705, 1, 0, 0, 0, 704, 702, 1, 0, 0, 0, 705, 707, 5, 39, 0, 0,
		706, 695, 1, 0, 0, 0, 707, 710, 1, 0, 0, 0, 708, 706, 1, 0, 0, 0, 708,
		709, 1, 0, 0, 0, 709, 712, 1, 0, 0, 0, 710, 708, 1, 0, 0, 0, 711, 713,
		5, 88, 0, 0, 712, 711, 1, 0, 0, 0, 712, 713, 1, 0, 0, 0, 713, 717, 1, 0,
		0, 0, 714, 716, 3, 146, 73, 0, 715, 714, 1, 0, 0, 0, 716, 719, 1, 0, 0,
		0, 717, 715, 1, 0, 0, 0, 717, 718, 1, 0, 0, 0, 718, 721, 1, 0, 0, 0, 719,
		717, 1, 0, 0, 0, 720, 722, 5, 70, 0, 0, 721, 720, 1, 0, 0, 0, 721, 722,
		1, 0, 0, 0, 722, 726, 1, 0, 0, 0, 723, 725, 3, 146, 73, 0, 724, 723, 1,
		0, 0, 0, 725, 728, 1, 0, 0, 0, 726, 724, 1, 0, 0, 0, 726, 727, 1, 0, 0,
		0, 727, 97, 1, 0, 0, 0, 728, 726, 1, 0, 0, 0, 729, 731, 5, 65, 0, 0, 730,
		732, 3, 100, 50, 0, 731, 730, 1, 0, 0, 0, 731, 732, 1, 0, 0, 0, 732, 733,
		1, 0, 0, 0, 733, 735, 5, 66, 0, 0, 734, 736, 5, 72, 0, 0, 735, 734, 1,
		0, 0, 0, 735, 736, 1, 0, 0, 0, 736, 99, 1, 0, 0, 0, 737, 739, 3, 146, 73,
		0, 738, 737, 1, 0, 0, 0, 739, 742, 1, 0, 0, 0, 740, 738, 1, 0, 0, 0, 740,
		741, 1, 0, 0, 0, 741, 743, 1, 0, 0, 0, 742, 740, 1, 0, 0, 0, 743, 760,
		3, 78, 39, 0, 744, 746, 3, 146, 73, 0, 745, 744, 1, 0, 0, 0, 746, 749,
		1, 0, 0, 0, 747, 745, 1, 0, 0, 0, 747, 748, 1, 0, 0, 0, 748, 750, 1, 0,
		0, 0, 749, 747, 1, 0, 0, 0, 750, 754, 5, 70, 0, 0, 751, 753, 3, 146, 73,
		0, 752, 751, 1, 0, 0, 0, 753, 756, 1, 0, 0, 0, 754, 752, 1, 0, 0, 0, 754,
		755, 1, 0, 0, 0, 755, 757, 1, 0, 0, 0, 756, 754, 1, 0, 0, 0, 757, 759,
		3, 78, 39, 0, 758, 747, 1, 0, 0, 0, 759, 762, 1, 0, 0, 0, 760, 758, 1,
		0, 0, 0, 760, 761, 1, 0, 0, 0, 761, 764, 1, 0, 0, 0, 762, 760, 1, 0, 0,
		0, 763, 765, 5, 88, 0, 0, 764, 763, 1, 0, 0, 0, 764, 765, 1, 0, 0, 0, 765,
		769, 1, 0, 0, 0, 766, 768, 3, 146, 73, 0, 767, 766, 1, 0, 0, 0, 768, 771,
		1, 0, 0, 0, 769, 767, 1, 0, 0, 0, 769, 770, 1, 0, 0, 0, 770, 773, 1, 0,
		0, 0, 771, 769, 1, 0, 0, 0, 772, 774, 5, 70, 0, 0, 773, 772, 1, 0, 0, 0,
		773, 774, 1, 0, 0, 0, 774, 778, 1, 0, 0, 0, 775, 777, 3, 146, 73, 0, 776,
		775, 1, 0, 0, 0, 777, 780, 1, 0, 0, 0, 778, 776, 1, 0, 0, 0, 778, 779,
		1, 0, 0, 0, 779, 101, 1, 0, 0, 0, 780, 778, 1, 0, 0, 0, 781, 782, 5, 92,
		0, 0, 782, 783, 7, 8, 0, 0, 783, 103, 1, 0, 0, 0, 784, 786, 5, 63, 0, 0,
		785, 787, 3, 78, 39, 0, 786, 785, 1, 0, 0, 0, 786, 787, 1, 0, 0, 0, 787,
		788, 1, 0, 0, 0, 788, 790, 5, 62, 0, 0, 789, 791, 3, 78, 39, 0, 790, 789,
		1, 0, 0, 0, 790, 791, 1, 0, 0, 0, 791, 792, 1, 0, 0, 0, 792, 794, 5, 62,
		0, 0, 793, 795, 3, 78, 39, 0, 794, 793, 1, 0, 0, 0, 794, 795, 1, 0, 0,
		0, 795, 796, 1, 0, 0, 0, 796, 811, 5, 64, 0, 0, 797, 799, 5, 63, 0, 0,
		798, 800, 3, 78, 39, 0, 799, 798, 1, 0, 0, 0, 799, 800, 1, 0, 0, 0, 800,
		801, 1, 0, 0, 0, 801, 803, 5, 62, 0, 0, 802, 804, 3, 78, 39, 0, 803, 802,
		1, 0, 0, 0, 803, 804, 1, 0, 0, 0, 804, 805, 1, 0, 0, 0, 805, 811, 5, 64,
		0, 0, 806, 807, 5, 63, 0, 0, 807, 808, 3, 78, 39, 0, 808, 809, 5, 64, 0,
		0, 809, 811, 1, 0, 0, 0, 810, 784, 1, 0, 0, 0, 810, 797, 1, 0, 0, 0, 810,
		806, 1, 0, 0, 0, 811, 105, 1, 0, 0, 0, 812, 824, 3, 118, 59, 0, 813, 824,
		3, 110, 55, 0, 814, 824, 3, 108, 54, 0, 815, 824, 3, 128, 64, 0, 816, 824,
		5, 36, 0, 0, 817, 824, 5, 38, 0, 0, 818, 824, 3, 126, 63, 0, 819, 824,
		3, 138, 69, 0, 820, 824, 3, 132, 66, 0, 821, 824, 3, 84, 42, 0, 822, 824,
		3, 130, 65, 0, 823, 812, 1, 0, 0, 0, 823, 813, 1, 0, 0, 0, 823, 814, 1,
		0, 0, 0, 823, 815, 1, 0, 0, 0, 823, 816, 1, 0, 0, 0, 823, 817, 1, 0, 0,
		0, 823, 818, 1, 0, 0, 0, 823, 819, 1, 0, 0, 0, 823, 820, 1, 0, 0, 0, 823,
		821, 1, 0, 0, 0, 823, 822, 1, 0, 0, 0, 824, 107, 1, 0, 0, 0, 825, 826,
		7, 9, 0, 0, 826, 109, 1, 0, 0, 0, 827, 828, 5, 106, 0, 0, 828, 111, 1,
		0, 0, 0, 829, 833, 5, 103, 0, 0, 830, 832, 3, 120, 60, 0, 831, 830, 1,
		0, 0, 0, 832, 835, 1, 0, 0, 0, 833, 831, 1, 0, 0, 0, 833, 834, 1, 0, 0,
		0, 834, 836, 1, 0, 0, 0, 835, 833, 1, 0, 0, 0, 836, 837, 5, 108, 0, 0,
		837, 113, 1, 0, 0, 0, 838, 842, 5, 104, 0, 0, 839, 841, 3, 122, 61, 0,
		840, 839, 1, 0, 0, 0, 841, 844, 1, 0, 0, 0, 842, 840, 1, 0, 0, 0, 842,
		843, 1, 0, 0, 0, 843, 845, 1, 0, 0, 0, 844, 842, 1, 0, 0, 0, 845, 846,
		5, 111, 0, 0, 846, 115, 1, 0, 0, 0, 847, 851, 5, 105, 0, 0, 848, 850, 3,
		124, 62, 0, 849, 848, 1, 0, 0, 0, 850, 853, 1, 0, 0, 0, 851, 849, 1, 0,
		0, 0, 851, 852, 1, 0, 0, 0, 852, 854, 1, 0, 0, 0, 853, 851, 1, 0, 0, 0,
		854, 855, 5, 114, 0, 0, 855, 117, 1, 0, 0, 0, 856, 860, 3, 112, 56, 0,
		857, 860, 3, 114, 57, 0, 858, 860, 3, 116, 58, 0, 859, 856, 1, 0, 0, 0,
		859, 857, 1, 0, 0, 0, 859, 858, 1, 0, 0, 0, 860, 119, 1, 0, 0, 0, 861,
		863, 5, 109, 0, 0, 862, 861, 1, 0, 0, 0, 863, 864, 1, 0, 0, 0, 864, 862,
		1, 0, 0, 0, 864, 865, 1, 0, 0, 0, 865, 871, 1, 0, 0, 0, 866, 867, 5, 110,
		0, 0, 867, 868, 3, 78, 39, 0, 868, 869, 5, 68, 0, 0, 869, 871, 1, 0, 0,
		0, 870, 862, 1, 0, 0, 0, 870, 866, 1, 0, 0, 0, 871, 121, 1, 0, 0, 0, 872,
		874, 5, 112, 0, 0, 873, 872, 1, 0, 0, 0, 874, 875, 1, 0, 0, 0, 875, 873,
		1, 0, 0, 0, 875, 876, 1, 0, 0, 0, 876, 882, 1, 0, 0, 0, 877, 878, 5, 113,
		0, 0, 878, 879, 3, 78, 39, 0, 879, 880, 5, 68, 0, 0, 880, 882, 1, 0, 0,
		0, 881, 873, 1, 0, 0, 0, 881, 877, 1, 0, 0, 0, 882, 123, 1, 0, 0, 0, 883,
		885, 5, 115, 0, 0, 884, 883, 1, 0, 0, 0, 885, 886, 1, 0, 0, 0, 886, 884,
		1, 0, 0, 0, 886, 887, 1, 0, 0, 0, 887, 893, 1, 0, 0, 0, 888, 889, 5, 116,
		0, 0, 889, 890, 3, 78, 39, 0, 890, 891, 5, 68, 0, 0, 891, 893, 1, 0, 0,
		0, 892, 884, 1, 0, 0, 0, 892, 888, 1, 0, 0, 0, 893, 125, 1, 0, 0, 0, 894,
		895, 7, 10, 0, 0, 895, 127, 1, 0, 0, 0, 896, 897, 5, 107, 0, 0, 897, 129,
		1, 0, 0, 0, 898, 902, 5, 63, 0, 0, 899, 901, 3, 146, 73, 0, 900, 899, 1,
		0, 0, 0, 901, 904, 1, 0, 0, 0, 902, 900, 1, 0, 0, 0, 902, 903, 1, 0, 0,
		0, 903, 906, 1, 0, 0, 0, 904, 902, 1, 0, 0, 0, 905, 907, 3, 136, 68, 0,
		906, 905, 1, 0, 0, 0, 906, 907, 1, 0, 0, 0, 907, 911, 1, 0, 0, 0, 908,
		910, 3, 146, 73, 0, 909, 908, 1, 0, 0, 0, 910, 913, 1, 0, 0, 0, 911, 909,
		1, 0, 0, 0, 911, 912, 1, 0, 0, 0, 912, 914, 1, 0, 0, 0, 913, 911, 1, 0,
		0, 0, 914, 915, 5, 64, 0, 0, 915, 131, 1, 0, 0, 0, 916, 917, 3, 86, 43,
		0, 917, 921, 5, 67, 0, 0, 918, 920, 3, 146, 73, 0, 919, 918, 1, 0, 0, 0,
		920, 923, 1, 0, 0, 0, 921, 919, 1, 0, 0, 0, 921, 922, 1, 0, 0, 0, 922,
		925, 1, 0, 0, 0, 923, 921, 1, 0, 0, 0, 924, 926, 3, 136, 68, 0, 925, 924,
		1, 0, 0, 0, 925, 926, 1, 0, 0, 0, 926, 930, 1, 0, 0, 0, 927, 929, 3, 146,
		73, 0, 928, 927, 1, 0, 0, 0, 929, 932, 1, 0, 0, 0, 930, 928, 1, 0, 0, 0,
		930, 931, 1, 0, 0, 0, 931, 933, 1, 0, 0, 0, 932, 930, 1, 0, 0, 0, 933,
		934, 5, 69, 0, 0, 934, 133, 1, 0, 0, 0, 935, 940, 3, 78, 39, 0, 936, 937,
		5, 70, 0, 0, 937, 939, 3, 78, 39, 0, 938, 936, 1, 0, 0, 0, 939, 942, 1,
		0, 0, 0, 940, 938, 1, 0, 0, 0, 940, 941, 1, 0, 0, 0, 941, 944, 1, 0, 0,
		0, 942, 940, 1, 0, 0, 0, 943, 945, 5, 70, 0, 0, 944, 943, 1, 0, 0, 0, 944,
		945, 1, 0, 0, 0, 945, 135, 1, 0, 0, 0, 946, 957, 3, 78, 39, 0, 947, 951,
		5, 70, 0, 0, 948, 950, 3, 146, 73, 0, 949, 948, 1, 0, 0, 0, 950, 953, 1,
		0, 0, 0, 951, 949, 1, 0, 0, 0, 951, 952, 1, 0, 0, 0, 952, 954, 1, 0, 0,
		0, 953, 951, 1, 0, 0, 0, 954, 956, 3, 78, 39, 0, 955, 947, 1, 0, 0, 0,
		956, 959, 1, 0, 0, 0, 957, 955, 1, 0, 0, 0, 957, 958, 1, 0, 0, 0, 958,
		961, 1, 0, 0, 0, 959, 957, 1, 0, 0, 0, 960, 962, 5, 70, 0, 0, 961, 960,
		1, 0, 0, 0, 961, 962, 1, 0, 0, 0, 962, 137, 1, 0, 0, 0, 963, 982, 3, 140,
		70, 0, 964, 968, 5, 67, 0, 0, 965, 967, 3, 146, 73, 0, 966, 965, 1, 0,
		0, 0, 967, 970, 1, 0, 0, 0, 968, 966, 1, 0, 0, 0, 968, 969, 1, 0, 0, 0,
		969, 972, 1, 0, 0, 0, 970, 968, 1, 0, 0, 0, 971, 973, 3, 142, 71, 0, 972,
		971, 1, 0, 0, 0, 972, 973, 1, 0, 0, 0, 973, 977, 1, 0, 0, 0, 974, 976,
		3, 146, 73, 0, 975, 974, 1, 0, 0, 0, 976, 979, 1, 0, 0, 0, 977, 975, 1,
		0, 0, 0, 977, 978, 1, 0, 0, 0, 978, 980, 1, 0, 0, 0, 979, 977, 1, 0, 0,
		0, 980, 982, 5, 69, 0, 0, 981, 963, 1, 0, 0, 0, 981, 964, 1, 0, 0, 0, 982,
		139, 1, 0, 0, 0, 983, 984, 3, 88, 44, 0, 984, 988, 5, 67, 0, 0, 985, 987,
		3, 146, 73, 0, 986, 985, 1, 0, 0, 0, 987, 990, 1, 0, 0, 0, 988, 986, 1,
		0, 0, 0, 988, 989, 1, 0, 0, 0, 989, 992, 1, 0, 0, 0, 990, 988, 1, 0, 0,
		0, 991, 993, 3, 142, 71, 0, 992, 991, 1, 0, 0, 0, 992, 993, 1, 0, 0, 0,
		993, 997, 1, 0, 0, 0, 994, 996, 3, 146, 73, 0, 995, 994, 1, 0, 0, 0, 996,
		999, 1, 0, 0, 0, 997, 995, 1, 0, 0, 0, 997, 998, 1, 0, 0, 0, 998, 1000,
		1, 0, 0, 0, 999, 997, 1, 0, 0, 0, 1000, 1001, 5, 69, 0, 0, 1001, 141, 1,
		0, 0, 0, 1002, 1013, 3, 144, 72, 0, 1003, 1007, 5, 70, 0, 0, 1004, 1006,
		3, 146, 73, 0, 1005, 1004, 1, 0, 0, 0, 1006, 1009, 1, 0, 0, 0, 1007, 1005,
		1, 0, 0, 0, 1007, 1008, 1, 0, 0, 0, 1008, 1010, 1, 0, 0, 0, 1009, 1007,
		1, 0, 0, 0, 1010, 1012, 3, 144, 72, 0, 1011, 1003, 1, 0, 0, 0, 1012, 1015,
		1, 0, 0, 0, 1013, 1011, 1, 0, 0, 0, 1013, 1014, 1, 0, 0, 0, 1014, 1017,
		1, 0, 0, 0, 1015, 1013, 1, 0, 0, 0, 1016, 1018, 5, 70, 0, 0, 1017, 1016,
		1, 0, 0, 0, 1017, 1018, 1, 0, 0, 0, 1018, 143, 1, 0, 0, 0, 1019, 1020,
		3, 78, 39, 0, 1020, 1021, 5, 62, 0, 0, 1021, 1022, 3, 78, 39, 0, 1022,
		145, 1, 0, 0, 0, 1023, 1025, 5, 99, 0, 0, 1024, 1023, 1, 0, 0, 0, 1025,
		1026, 1, 0, 0, 0, 1026, 1024, 1, 0, 0, 0, 1026, 1027, 1, 0, 0, 0, 1027,
		147, 1, 0, 0, 0, 1028, 1036, 5, 87, 0, 0, 1029, 1031, 5, 99, 0, 0, 1030,
		1029, 1, 0, 0, 0, 1031, 1032, 1, 0, 0, 0, 1032, 1030, 1, 0, 0, 0, 1032,
		1033, 1, 0, 0, 0, 1033, 1036, 1, 0, 0, 0, 1034, 1036, 4, 74, 10, 0, 1035,
		1028, 1, 0, 0, 0, 1035, 1030, 1, 0, 0, 0, 1035, 1034, 1, 0, 0, 0, 1036,
		149, 1, 0, 0, 0, 127, 153, 162, 208, 214, 219, 236, 244, 255, 264, 269,
		273, 277, 281, 285, 291, 295, 298, 305, 311, 318, 322, 328, 334, 336, 341,
		355, 359, 364, 370, 374, 379, 387, 402, 408, 416, 429, 445, 448, 463, 467,
		472, 484, 491, 506, 513, 523, 533, 543, 550, 559, 568, 577, 584, 591, 603,
		605, 607, 612, 621, 629, 633, 643, 660, 664, 670, 674, 679, 681, 688, 695,
		702, 708, 712, 717, 721, 726, 731, 735, 740, 747, 754, 760, 764, 769, 773,
		778, 786, 790, 794, 799, 803, 810, 823, 833, 842, 851, 859, 864, 870, 875,
		881, 886, 892, 902, 906, 911, 921, 925, 930, 940, 944, 951, 957, 961, 968,
		972, 977, 981, 988, 992, 997, 1007, 1013, 1017, 1026, 1032, 1035,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// YaklangParserInit initializes any static state used to implement YaklangParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewYaklangParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func YaklangParserInit() {
	staticData := &yaklangparserParserStaticData
	staticData.once.Do(yaklangparserParserInit)
}

// NewYaklangParser produces a new parser instance for the optional input antlr.TokenStream.
func NewYaklangParser(input antlr.TokenStream) *YaklangParser {
	YaklangParserInit()
	this := new(YaklangParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &yaklangparserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	this.RuleNames = staticData.ruleNames
	this.LiteralNames = staticData.literalNames
	this.SymbolicNames = staticData.symbolicNames
	this.GrammarFileName = "java-escape"

	return this
}

// YaklangParser tokens.
const (
	YaklangParserEOF                                         = antlr.TokenEOF
	YaklangParserPanic                                       = 1
	YaklangParserRecover                                     = 2
	YaklangParserIf                                          = 3
	YaklangParserElif                                        = 4
	YaklangParserElse                                        = 5
	YaklangParserSwitch                                      = 6
	YaklangParserCase                                        = 7
	YaklangParserDefault                                     = 8
	YaklangParserFor                                         = 9
	YaklangParserContinue                                    = 10
	YaklangParserBreak                                       = 11
	YaklangParserReturn                                      = 12
	YaklangParserInclude                                     = 13
	YaklangParserTry                                         = 14
	YaklangParserCatch                                       = 15
	YaklangParserFinally                                     = 16
	YaklangParserImportmod                                   = 17
	YaklangParserAs                                          = 18
	YaklangParserExport                                      = 19
	YaklangParserDefer                                       = 20
	YaklangParserGo                                          = 21
	YaklangParserRange                                       = 22
	YaklangParserFunc                                        = 23
	YaklangParserMap                                         = 24
	YaklangParserChan                                        = 25
	YaklangParserClass                                       = 26
	YaklangParserNew                                         = 27
	YaklangParserMake                                        = 28
	YaklangParserTrue                                        = 29
	YaklangParserFalse                                       = 30
	YaklangParserIn                                          = 31
	YaklangParserNotLiteral                                  = 32
	YaklangParserAssert                                      = 33
	YaklangParserVar                                         = 34
	YaklangParserVarTypeName                                 = 35
	YaklangParserUndefinedLiteral                            = 36
	YaklangParserFallthrough                                 = 37
	YaklangParserNilLiteral                                  = 38
	YaklangParserIdentifier                                  = 39
	YaklangParserIdentifierWithDollar                        = 40
	YaklangParserMul                                         = 41
	YaklangParserDiv                                         = 42
	YaklangParserMod                                         = 43
	YaklangParserLtLt                                        = 44
	YaklangParserLt                                          = 45
	YaklangParserGtGt                                        = 46
	YaklangParserGt                                          = 47
	YaklangParserAmp                                         = 48
	YaklangParserAmpNot                                      = 49
	YaklangParserPlus                                        = 50
	YaklangParserSub                                         = 51
	YaklangParserXor                                         = 52
	YaklangParserXand                                        = 53
	YaklangParserEq                                          = 54
	YaklangParserLtEq                                        = 55
	YaklangParserGtEq                                        = 56
	YaklangParserNeq                                         = 57
	YaklangParserChanIn                                      = 58
	YaklangParserLogicAnd                                    = 59
	YaklangParserLogicOr                                     = 60
	YaklangParserQuestion                                    = 61
	YaklangParserColon                                       = 62
	YaklangParserLBracket                                    = 63
	YaklangParserRBracket                                    = 64
	YaklangParserLParen                                      = 65
	YaklangParserRParen                                      = 66
	YaklangParserLBrace                                      = 67
	YaklangParserTemplateCloseBrace                          = 68
	YaklangParserRBrace                                      = 69
	YaklangParserComma                                       = 70
	YaklangParserAssignEq                                    = 71
	YaklangParserWavy                                        = 72
	YaklangParserColonAssignEq                               = 73
	YaklangParserPlusPlus                                    = 74
	YaklangParserSubSub                                      = 75
	YaklangParserPlusEq                                      = 76
	YaklangParserMinusEq                                     = 77
	YaklangParserMulEq                                       = 78
	YaklangParserDivEq                                       = 79
	YaklangParserModEq                                       = 80
	YaklangParserBitOrEq                                     = 81
	YaklangParserLtLtEq                                      = 82
	YaklangParserGtGtEq                                      = 83
	YaklangParserAmpEq                                       = 84
	YaklangParserBitAndEq                                    = 85
	YaklangParserBitAndNotEq                                 = 86
	YaklangParserSemiColon                                   = 87
	YaklangParserEllipsis                                    = 88
	YaklangParserEqGt                                        = 89
	YaklangParserLtGt                                        = 90
	YaklangParserNot                                         = 91
	YaklangParserDot                                         = 92
	YaklangParserWS                                          = 93
	YaklangParserCommentStart                                = 94
	YaklangParserCommentEnd                                  = 95
	YaklangParserBackTickL                                   = 96
	YaklangParserCOMMENT                                     = 97
	YaklangParserLINE_COMMENT                                = 98
	YaklangParserLF                                          = 99
	YaklangParserEOS                                         = 100
	YaklangParserIntegerLiteral                              = 101
	YaklangParserFloatLiteral                                = 102
	YaklangParserTemplateSingleQuoteStringStart              = 103
	YaklangParserTemplateDoubleQuoteStringStart              = 104
	YaklangParserTemplateBackTickStringStart                 = 105
	YaklangParserStringLiteral                               = 106
	YaklangParserCharacterLiteral                            = 107
	YaklangParserTemplateSingleQuoteStringCharacterStringEnd = 108
	YaklangParserTemplateSingleQuoteStringCharacter          = 109
	YaklangParserTemplateSingleQuoteStringStartExpression    = 110
	YaklangParserTemplateDoubleQuoteStringCharacterStringEnd = 111
	YaklangParserTemplateDoubleQuoteStringCharacter          = 112
	YaklangParserTemplateDoubleQuoteStringStartExpression    = 113
	YaklangParserTemplateBackTickStringCharacterStringEnd    = 114
	YaklangParserTemplateBackTickStringCharacter             = 115
	YaklangParserTemplateBackTickStringStartExpression       = 116
)

// YaklangParser rules.
const (
	YaklangParserRULE_program                          = 0
	YaklangParserRULE_statementList                    = 1
	YaklangParserRULE_statement                        = 2
	YaklangParserRULE_tryStmt                          = 3
	YaklangParserRULE_expressionStmt                   = 4
	YaklangParserRULE_assignExpressionStmt             = 5
	YaklangParserRULE_includeStmt                      = 6
	YaklangParserRULE_deferStmt                        = 7
	YaklangParserRULE_goStmt                           = 8
	YaklangParserRULE_assertStmt                       = 9
	YaklangParserRULE_fallthroughStmt                  = 10
	YaklangParserRULE_breakStmt                        = 11
	YaklangParserRULE_continueStmt                     = 12
	YaklangParserRULE_returnStmt                       = 13
	YaklangParserRULE_forStmt                          = 14
	YaklangParserRULE_forStmtCond                      = 15
	YaklangParserRULE_forFirstExpr                     = 16
	YaklangParserRULE_forThirdExpr                     = 17
	YaklangParserRULE_forRangeStmt                     = 18
	YaklangParserRULE_switchStmt                       = 19
	YaklangParserRULE_ifStmt                           = 20
	YaklangParserRULE_elseBlock                        = 21
	YaklangParserRULE_block                            = 22
	YaklangParserRULE_empty                            = 23
	YaklangParserRULE_inplaceAssignOperator            = 24
	YaklangParserRULE_assignExpression                 = 25
	YaklangParserRULE_declareVariableExpressionStmt    = 26
	YaklangParserRULE_declareVariableExpression        = 27
	YaklangParserRULE_declareVariableOnly              = 28
	YaklangParserRULE_declareAndAssignExpression       = 29
	YaklangParserRULE_leftExpressionList               = 30
	YaklangParserRULE_unaryOperator                    = 31
	YaklangParserRULE_bitBinaryOperator                = 32
	YaklangParserRULE_additiveBinaryOperator           = 33
	YaklangParserRULE_multiplicativeBinaryOperator     = 34
	YaklangParserRULE_comparisonBinaryOperator         = 35
	YaklangParserRULE_leftExpression                   = 36
	YaklangParserRULE_leftMemberCall                   = 37
	YaklangParserRULE_leftSliceCall                    = 38
	YaklangParserRULE_expression                       = 39
	YaklangParserRULE_parenExpression                  = 40
	YaklangParserRULE_makeExpression                   = 41
	YaklangParserRULE_typeLiteral                      = 42
	YaklangParserRULE_sliceTypeLiteral                 = 43
	YaklangParserRULE_mapTypeLiteral                   = 44
	YaklangParserRULE_instanceCode                     = 45
	YaklangParserRULE_anonymousFunctionDecl            = 46
	YaklangParserRULE_functionNameDecl                 = 47
	YaklangParserRULE_functionParamDecl                = 48
	YaklangParserRULE_functionCall                     = 49
	YaklangParserRULE_ordinaryArguments                = 50
	YaklangParserRULE_memberCall                       = 51
	YaklangParserRULE_sliceCall                        = 52
	YaklangParserRULE_literal                          = 53
	YaklangParserRULE_numericLiteral                   = 54
	YaklangParserRULE_stringLiteral                    = 55
	YaklangParserRULE_templateSingleQuoteStringLiteral = 56
	YaklangParserRULE_templateDoubleQuoteStringLiteral = 57
	YaklangParserRULE_templateBackTickStringLiteral    = 58
	YaklangParserRULE_templateStringLiteral            = 59
	YaklangParserRULE_templateSingleQuoteStringAtom    = 60
	YaklangParserRULE_templateDoubleQuoteStringAtom    = 61
	YaklangParserRULE_templateBackTickStringAtom       = 62
	YaklangParserRULE_boolLiteral                      = 63
	YaklangParserRULE_characterLiteral                 = 64
	YaklangParserRULE_sliceLiteral                     = 65
	YaklangParserRULE_sliceTypedLiteral                = 66
	YaklangParserRULE_expressionList                   = 67
	YaklangParserRULE_expressionListMultiline          = 68
	YaklangParserRULE_mapLiteral                       = 69
	YaklangParserRULE_mapTypedLiteral                  = 70
	YaklangParserRULE_mapPairs                         = 71
	YaklangParserRULE_mapPair                          = 72
	YaklangParserRULE_ws                               = 73
	YaklangParserRULE_eos                              = 74
)

// IProgramContext is an interface to support dynamic dispatch.
type IProgramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgramContext differentiates from other interfaces.
	IsProgramContext()
}

type ProgramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgramContext() *ProgramContext {
	var p = new(ProgramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_program
	return p
}

func (*ProgramContext) IsProgramContext() {}

func NewProgramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgramContext {
	var p = new(ProgramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_program

	return p
}

func (s *ProgramContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgramContext) StatementList() IStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *ProgramContext) EOF() antlr.TerminalNode {
	return s.GetToken(YaklangParserEOF, 0)
}

func (s *ProgramContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *ProgramContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *ProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProgramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitProgram(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Program() (localctx IProgramContext) {
	this := p
	_ = this

	localctx = NewProgramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, YaklangParserRULE_program)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(153)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(150)
				p.Ws()
			}

		}
		p.SetState(155)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext())
	}
	{
		p.SetState(156)
		p.StatementList()
	}
	{
		p.SetState(157)
		p.Match(YaklangParserEOF)
	}

	return localctx
}

// IStatementListContext is an interface to support dynamic dispatch.
type IStatementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementListContext differentiates from other interfaces.
	IsStatementListContext()
}

type StatementListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementListContext() *StatementListContext {
	var p = new(StatementListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_statementList
	return p
}

func (*StatementListContext) IsStatementListContext() {}

func NewStatementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementListContext {
	var p = new(StatementListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_statementList

	return p
}

func (s *StatementListContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementListContext) AllStatement() []IStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementContext); ok {
			len++
		}
	}

	tst := make([]IStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementContext); ok {
			tst[i] = t.(IStatementContext)
			i++
		}
	}

	return tst
}

func (s *StatementListContext) Statement(i int) IStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitStatementList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) StatementList() (localctx IStatementListContext) {
	this := p
	_ = this

	localctx = NewStatementListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, YaklangParserRULE_statementList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(160)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(159)
				p.Statement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(162)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext())
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) DeclareVariableExpressionStmt() IDeclareVariableExpressionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareVariableExpressionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareVariableExpressionStmtContext)
}

func (s *StatementContext) Eos() IEosContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *StatementContext) AssignExpressionStmt() IAssignExpressionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignExpressionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignExpressionStmtContext)
}

func (s *StatementContext) ExpressionStmt() IExpressionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionStmtContext)
}

func (s *StatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *StatementContext) TryStmt() ITryStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITryStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITryStmtContext)
}

func (s *StatementContext) Empty() IEmptyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEmptyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEmptyContext)
}

func (s *StatementContext) IfStmt() IIfStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfStmtContext)
}

func (s *StatementContext) SwitchStmt() ISwitchStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchStmtContext)
}

func (s *StatementContext) ForRangeStmt() IForRangeStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForRangeStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForRangeStmtContext)
}

func (s *StatementContext) ForStmt() IForStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForStmtContext)
}

func (s *StatementContext) BreakStmt() IBreakStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBreakStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBreakStmtContext)
}

func (s *StatementContext) ReturnStmt() IReturnStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturnStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturnStmtContext)
}

func (s *StatementContext) ContinueStmt() IContinueStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IContinueStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IContinueStmtContext)
}

func (s *StatementContext) FallthroughStmt() IFallthroughStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFallthroughStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFallthroughStmtContext)
}

func (s *StatementContext) IncludeStmt() IIncludeStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIncludeStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIncludeStmtContext)
}

func (s *StatementContext) DeferStmt() IDeferStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeferStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeferStmtContext)
}

func (s *StatementContext) GoStmt() IGoStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGoStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGoStmtContext)
}

func (s *StatementContext) AssertStmt() IAssertStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssertStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssertStmtContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Statement() (localctx IStatementContext) {
	this := p
	_ = this

	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, YaklangParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(208)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(164)
			p.DeclareVariableExpressionStmt()
		}
		{
			p.SetState(165)
			p.Eos()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(167)
			p.AssignExpressionStmt()
		}
		{
			p.SetState(168)
			p.Eos()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(170)
			p.ExpressionStmt()
		}
		{
			p.SetState(171)
			p.Eos()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(173)
			p.Block()
		}
		{
			p.SetState(174)
			p.Eos()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(176)
			p.TryStmt()
		}
		{
			p.SetState(177)
			p.Eos()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(179)
			p.Empty()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(180)
			p.IfStmt()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(181)
			p.SwitchStmt()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(182)
			p.ForRangeStmt()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(183)
			p.ForStmt()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(184)
			p.BreakStmt()
		}
		{
			p.SetState(185)
			p.Eos()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(187)
			p.ReturnStmt()
		}
		{
			p.SetState(188)
			p.Eos()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(190)
			p.ContinueStmt()
		}
		{
			p.SetState(191)
			p.Eos()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(193)
			p.FallthroughStmt()
		}
		{
			p.SetState(194)
			p.Eos()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(196)
			p.IncludeStmt()
		}
		{
			p.SetState(197)
			p.Eos()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(199)
			p.DeferStmt()
		}
		{
			p.SetState(200)
			p.Eos()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(202)
			p.GoStmt()
		}
		{
			p.SetState(203)
			p.Eos()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(205)
			p.AssertStmt()
		}
		{
			p.SetState(206)
			p.Eos()
		}

	}

	return localctx
}

// ITryStmtContext is an interface to support dynamic dispatch.
type ITryStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryStmtContext differentiates from other interfaces.
	IsTryStmtContext()
}

type TryStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryStmtContext() *TryStmtContext {
	var p = new(TryStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_tryStmt
	return p
}

func (*TryStmtContext) IsTryStmtContext() {}

func NewTryStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryStmtContext {
	var p = new(TryStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_tryStmt

	return p
}

func (s *TryStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *TryStmtContext) Try() antlr.TerminalNode {
	return s.GetToken(YaklangParserTry, 0)
}

func (s *TryStmtContext) AllBlock() []IBlockContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBlockContext); ok {
			len++
		}
	}

	tst := make([]IBlockContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBlockContext); ok {
			tst[i] = t.(IBlockContext)
			i++
		}
	}

	return tst
}

func (s *TryStmtContext) Block(i int) IBlockContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *TryStmtContext) Catch() antlr.TerminalNode {
	return s.GetToken(YaklangParserCatch, 0)
}

func (s *TryStmtContext) Identifier() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, 0)
}

func (s *TryStmtContext) Finally() antlr.TerminalNode {
	return s.GetToken(YaklangParserFinally, 0)
}

func (s *TryStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTryStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TryStmt() (localctx ITryStmtContext) {
	this := p
	_ = this

	localctx = NewTryStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, YaklangParserRULE_tryStmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(210)
		p.Match(YaklangParserTry)
	}
	{
		p.SetState(211)
		p.Block()
	}
	{
		p.SetState(212)
		p.Match(YaklangParserCatch)
	}
	p.SetState(214)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserIdentifier {
		{
			p.SetState(213)
			p.Match(YaklangParserIdentifier)
		}

	}
	{
		p.SetState(216)
		p.Block()
	}
	p.SetState(219)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(217)
			p.Match(YaklangParserFinally)
		}
		{
			p.SetState(218)
			p.Block()
		}

	}

	return localctx
}

// IExpressionStmtContext is an interface to support dynamic dispatch.
type IExpressionStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStmtContext differentiates from other interfaces.
	IsExpressionStmtContext()
}

type ExpressionStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStmtContext() *ExpressionStmtContext {
	var p = new(ExpressionStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_expressionStmt
	return p
}

func (*ExpressionStmtContext) IsExpressionStmtContext() {}

func NewExpressionStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStmtContext {
	var p = new(ExpressionStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_expressionStmt

	return p
}

func (s *ExpressionStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitExpressionStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ExpressionStmt() (localctx IExpressionStmtContext) {
	this := p
	_ = this

	localctx = NewExpressionStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, YaklangParserRULE_expressionStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(221)
		p.expression(0)
	}

	return localctx
}

// IAssignExpressionStmtContext is an interface to support dynamic dispatch.
type IAssignExpressionStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignExpressionStmtContext differentiates from other interfaces.
	IsAssignExpressionStmtContext()
}

type AssignExpressionStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignExpressionStmtContext() *AssignExpressionStmtContext {
	var p = new(AssignExpressionStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_assignExpressionStmt
	return p
}

func (*AssignExpressionStmtContext) IsAssignExpressionStmtContext() {}

func NewAssignExpressionStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignExpressionStmtContext {
	var p = new(AssignExpressionStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_assignExpressionStmt

	return p
}

func (s *AssignExpressionStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignExpressionStmtContext) AssignExpression() IAssignExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignExpressionContext)
}

func (s *AssignExpressionStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignExpressionStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignExpressionStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitAssignExpressionStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) AssignExpressionStmt() (localctx IAssignExpressionStmtContext) {
	this := p
	_ = this

	localctx = NewAssignExpressionStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, YaklangParserRULE_assignExpressionStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(223)
		p.AssignExpression()
	}

	return localctx
}

// IIncludeStmtContext is an interface to support dynamic dispatch.
type IIncludeStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIncludeStmtContext differentiates from other interfaces.
	IsIncludeStmtContext()
}

type IncludeStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIncludeStmtContext() *IncludeStmtContext {
	var p = new(IncludeStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_includeStmt
	return p
}

func (*IncludeStmtContext) IsIncludeStmtContext() {}

func NewIncludeStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IncludeStmtContext {
	var p = new(IncludeStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_includeStmt

	return p
}

func (s *IncludeStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *IncludeStmtContext) Include() antlr.TerminalNode {
	return s.GetToken(YaklangParserInclude, 0)
}

func (s *IncludeStmtContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserStringLiteral, 0)
}

func (s *IncludeStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IncludeStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IncludeStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitIncludeStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) IncludeStmt() (localctx IIncludeStmtContext) {
	this := p
	_ = this

	localctx = NewIncludeStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, YaklangParserRULE_includeStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(225)
		p.Match(YaklangParserInclude)
	}
	{
		p.SetState(226)
		p.Match(YaklangParserStringLiteral)
	}

	return localctx
}

// IDeferStmtContext is an interface to support dynamic dispatch.
type IDeferStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeferStmtContext differentiates from other interfaces.
	IsDeferStmtContext()
}

type DeferStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeferStmtContext() *DeferStmtContext {
	var p = new(DeferStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_deferStmt
	return p
}

func (*DeferStmtContext) IsDeferStmtContext() {}

func NewDeferStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeferStmtContext {
	var p = new(DeferStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_deferStmt

	return p
}

func (s *DeferStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *DeferStmtContext) Defer() antlr.TerminalNode {
	return s.GetToken(YaklangParserDefer, 0)
}

func (s *DeferStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DeferStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeferStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeferStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitDeferStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) DeferStmt() (localctx IDeferStmtContext) {
	this := p
	_ = this

	localctx = NewDeferStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, YaklangParserRULE_deferStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(228)
		p.Match(YaklangParserDefer)
	}
	{
		p.SetState(229)
		p.expression(0)
	}

	return localctx
}

// IGoStmtContext is an interface to support dynamic dispatch.
type IGoStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGoStmtContext differentiates from other interfaces.
	IsGoStmtContext()
}

type GoStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGoStmtContext() *GoStmtContext {
	var p = new(GoStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_goStmt
	return p
}

func (*GoStmtContext) IsGoStmtContext() {}

func NewGoStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GoStmtContext {
	var p = new(GoStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_goStmt

	return p
}

func (s *GoStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *GoStmtContext) Go() antlr.TerminalNode {
	return s.GetToken(YaklangParserGo, 0)
}

func (s *GoStmtContext) InstanceCode() IInstanceCodeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstanceCodeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstanceCodeContext)
}

func (s *GoStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GoStmtContext) FunctionCall() IFunctionCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *GoStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GoStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GoStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitGoStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) GoStmt() (localctx IGoStmtContext) {
	this := p
	_ = this

	localctx = NewGoStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, YaklangParserRULE_goStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(231)
		p.Match(YaklangParserGo)
	}
	p.SetState(236)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(232)
			p.expression(0)
		}
		{
			p.SetState(233)
			p.FunctionCall()
		}

	case 2:
		{
			p.SetState(235)
			p.InstanceCode()
		}

	}

	return localctx
}

// IAssertStmtContext is an interface to support dynamic dispatch.
type IAssertStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssertStmtContext differentiates from other interfaces.
	IsAssertStmtContext()
}

type AssertStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssertStmtContext() *AssertStmtContext {
	var p = new(AssertStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_assertStmt
	return p
}

func (*AssertStmtContext) IsAssertStmtContext() {}

func NewAssertStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssertStmtContext {
	var p = new(AssertStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_assertStmt

	return p
}

func (s *AssertStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *AssertStmtContext) Assert() antlr.TerminalNode {
	return s.GetToken(YaklangParserAssert, 0)
}

func (s *AssertStmtContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *AssertStmtContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AssertStmtContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *AssertStmtContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *AssertStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssertStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssertStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitAssertStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) AssertStmt() (localctx IAssertStmtContext) {
	this := p
	_ = this

	localctx = NewAssertStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, YaklangParserRULE_assertStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(238)
		p.Match(YaklangParserAssert)
	}
	{
		p.SetState(239)
		p.expression(0)
	}
	p.SetState(244)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(240)
				p.Match(YaklangParserComma)
			}
			{
				p.SetState(241)
				p.expression(0)
			}

		}
		p.SetState(246)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())
	}

	return localctx
}

// IFallthroughStmtContext is an interface to support dynamic dispatch.
type IFallthroughStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFallthroughStmtContext differentiates from other interfaces.
	IsFallthroughStmtContext()
}

type FallthroughStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFallthroughStmtContext() *FallthroughStmtContext {
	var p = new(FallthroughStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_fallthroughStmt
	return p
}

func (*FallthroughStmtContext) IsFallthroughStmtContext() {}

func NewFallthroughStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FallthroughStmtContext {
	var p = new(FallthroughStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_fallthroughStmt

	return p
}

func (s *FallthroughStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *FallthroughStmtContext) Fallthrough() antlr.TerminalNode {
	return s.GetToken(YaklangParserFallthrough, 0)
}

func (s *FallthroughStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FallthroughStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FallthroughStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitFallthroughStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) FallthroughStmt() (localctx IFallthroughStmtContext) {
	this := p
	_ = this

	localctx = NewFallthroughStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, YaklangParserRULE_fallthroughStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(247)
		p.Match(YaklangParserFallthrough)
	}

	return localctx
}

// IBreakStmtContext is an interface to support dynamic dispatch.
type IBreakStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStmtContext differentiates from other interfaces.
	IsBreakStmtContext()
}

type BreakStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStmtContext() *BreakStmtContext {
	var p = new(BreakStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_breakStmt
	return p
}

func (*BreakStmtContext) IsBreakStmtContext() {}

func NewBreakStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStmtContext {
	var p = new(BreakStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_breakStmt

	return p
}

func (s *BreakStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStmtContext) Break() antlr.TerminalNode {
	return s.GetToken(YaklangParserBreak, 0)
}

func (s *BreakStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitBreakStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) BreakStmt() (localctx IBreakStmtContext) {
	this := p
	_ = this

	localctx = NewBreakStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, YaklangParserRULE_breakStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(249)
		p.Match(YaklangParserBreak)
	}

	return localctx
}

// IContinueStmtContext is an interface to support dynamic dispatch.
type IContinueStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStmtContext differentiates from other interfaces.
	IsContinueStmtContext()
}

type ContinueStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStmtContext() *ContinueStmtContext {
	var p = new(ContinueStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_continueStmt
	return p
}

func (*ContinueStmtContext) IsContinueStmtContext() {}

func NewContinueStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStmtContext {
	var p = new(ContinueStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_continueStmt

	return p
}

func (s *ContinueStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStmtContext) Continue() antlr.TerminalNode {
	return s.GetToken(YaklangParserContinue, 0)
}

func (s *ContinueStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitContinueStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ContinueStmt() (localctx IContinueStmtContext) {
	this := p
	_ = this

	localctx = NewContinueStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, YaklangParserRULE_continueStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(251)
		p.Match(YaklangParserContinue)
	}

	return localctx
}

// IReturnStmtContext is an interface to support dynamic dispatch.
type IReturnStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStmtContext differentiates from other interfaces.
	IsReturnStmtContext()
}

type ReturnStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStmtContext() *ReturnStmtContext {
	var p = new(ReturnStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_returnStmt
	return p
}

func (*ReturnStmtContext) IsReturnStmtContext() {}

func NewReturnStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStmtContext {
	var p = new(ReturnStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_returnStmt

	return p
}

func (s *ReturnStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStmtContext) Return() antlr.TerminalNode {
	return s.GetToken(YaklangParserReturn, 0)
}

func (s *ReturnStmtContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ReturnStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitReturnStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ReturnStmt() (localctx IReturnStmtContext) {
	this := p
	_ = this

	localctx = NewReturnStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, YaklangParserRULE_returnStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(253)
		p.Match(YaklangParserReturn)
	}
	p.SetState(255)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(254)
			p.ExpressionList()
		}

	}

	return localctx
}

// IForStmtContext is an interface to support dynamic dispatch.
type IForStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForStmtContext differentiates from other interfaces.
	IsForStmtContext()
}

type ForStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStmtContext() *ForStmtContext {
	var p = new(ForStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_forStmt
	return p
}

func (*ForStmtContext) IsForStmtContext() {}

func NewForStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStmtContext {
	var p = new(ForStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_forStmt

	return p
}

func (s *ForStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStmtContext) For() antlr.TerminalNode {
	return s.GetToken(YaklangParserFor, 0)
}

func (s *ForStmtContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForStmtContext) ForStmtCond() IForStmtCondContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForStmtCondContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForStmtCondContext)
}

func (s *ForStmtContext) LParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserLParen, 0)
}

func (s *ForStmtContext) RParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserRParen, 0)
}

func (s *ForStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitForStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ForStmt() (localctx IForStmtContext) {
	this := p
	_ = this

	localctx = NewForStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, YaklangParserRULE_forStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(257)
		p.Match(YaklangParserFor)
	}
	p.SetState(264)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(258)
			p.ForStmtCond()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(259)
			p.Match(YaklangParserLParen)
		}
		{
			p.SetState(260)
			p.ForStmtCond()
		}
		{
			p.SetState(261)
			p.Match(YaklangParserRParen)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(263)
			p.expression(0)
		}

	}
	{
		p.SetState(266)
		p.Block()
	}

	return localctx
}

// IForStmtCondContext is an interface to support dynamic dispatch.
type IForStmtCondContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForStmtCondContext differentiates from other interfaces.
	IsForStmtCondContext()
}

type ForStmtCondContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStmtCondContext() *ForStmtCondContext {
	var p = new(ForStmtCondContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_forStmtCond
	return p
}

func (*ForStmtCondContext) IsForStmtCondContext() {}

func NewForStmtCondContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStmtCondContext {
	var p = new(ForStmtCondContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_forStmtCond

	return p
}

func (s *ForStmtCondContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStmtCondContext) AllSemiColon() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserSemiColon)
}

func (s *ForStmtCondContext) SemiColon(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserSemiColon, i)
}

func (s *ForStmtCondContext) ForFirstExpr() IForFirstExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForFirstExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForFirstExprContext)
}

func (s *ForStmtCondContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForStmtCondContext) ForThirdExpr() IForThirdExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForThirdExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForThirdExprContext)
}

func (s *ForStmtCondContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStmtCondContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForStmtCondContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitForStmtCond(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ForStmtCond() (localctx IForStmtCondContext) {
	this := p
	_ = this

	localctx = NewForStmtCondContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, YaklangParserRULE_forStmtCond)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(269)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8727440654341) != 0 {
		{
			p.SetState(268)
			p.ForFirstExpr()
		}

	}
	{
		p.SetState(271)
		p.Match(YaklangParserSemiColon)
	}
	p.SetState(273)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8727440654341) != 0 {
		{
			p.SetState(272)
			p.expression(0)
		}

	}
	{
		p.SetState(275)
		p.Match(YaklangParserSemiColon)
	}
	p.SetState(277)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(276)
			p.ForThirdExpr()
		}

	}

	return localctx
}

// IForFirstExprContext is an interface to support dynamic dispatch.
type IForFirstExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForFirstExprContext differentiates from other interfaces.
	IsForFirstExprContext()
}

type ForFirstExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForFirstExprContext() *ForFirstExprContext {
	var p = new(ForFirstExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_forFirstExpr
	return p
}

func (*ForFirstExprContext) IsForFirstExprContext() {}

func NewForFirstExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForFirstExprContext {
	var p = new(ForFirstExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_forFirstExpr

	return p
}

func (s *ForFirstExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ForFirstExprContext) AssignExpression() IAssignExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignExpressionContext)
}

func (s *ForFirstExprContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForFirstExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForFirstExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForFirstExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitForFirstExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ForFirstExpr() (localctx IForFirstExprContext) {
	this := p
	_ = this

	localctx = NewForFirstExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, YaklangParserRULE_forFirstExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(281)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(279)
			p.AssignExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(280)
			p.expression(0)
		}

	}

	return localctx
}

// IForThirdExprContext is an interface to support dynamic dispatch.
type IForThirdExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForThirdExprContext differentiates from other interfaces.
	IsForThirdExprContext()
}

type ForThirdExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForThirdExprContext() *ForThirdExprContext {
	var p = new(ForThirdExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_forThirdExpr
	return p
}

func (*ForThirdExprContext) IsForThirdExprContext() {}

func NewForThirdExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForThirdExprContext {
	var p = new(ForThirdExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_forThirdExpr

	return p
}

func (s *ForThirdExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ForThirdExprContext) AssignExpression() IAssignExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignExpressionContext)
}

func (s *ForThirdExprContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForThirdExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForThirdExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForThirdExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitForThirdExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ForThirdExpr() (localctx IForThirdExprContext) {
	this := p
	_ = this

	localctx = NewForThirdExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, YaklangParserRULE_forThirdExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(285)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(283)
			p.AssignExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(284)
			p.expression(0)
		}

	}

	return localctx
}

// IForRangeStmtContext is an interface to support dynamic dispatch.
type IForRangeStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForRangeStmtContext differentiates from other interfaces.
	IsForRangeStmtContext()
}

type ForRangeStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForRangeStmtContext() *ForRangeStmtContext {
	var p = new(ForRangeStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_forRangeStmt
	return p
}

func (*ForRangeStmtContext) IsForRangeStmtContext() {}

func NewForRangeStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForRangeStmtContext {
	var p = new(ForRangeStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_forRangeStmt

	return p
}

func (s *ForRangeStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ForRangeStmtContext) For() antlr.TerminalNode {
	return s.GetToken(YaklangParserFor, 0)
}

func (s *ForRangeStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForRangeStmtContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForRangeStmtContext) Range() antlr.TerminalNode {
	return s.GetToken(YaklangParserRange, 0)
}

func (s *ForRangeStmtContext) In() antlr.TerminalNode {
	return s.GetToken(YaklangParserIn, 0)
}

func (s *ForRangeStmtContext) LeftExpressionList() ILeftExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftExpressionListContext)
}

func (s *ForRangeStmtContext) ColonAssignEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserColonAssignEq, 0)
}

func (s *ForRangeStmtContext) AssignEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserAssignEq, 0)
}

func (s *ForRangeStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForRangeStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForRangeStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitForRangeStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ForRangeStmt() (localctx IForRangeStmtContext) {
	this := p
	_ = this

	localctx = NewForRangeStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, YaklangParserRULE_forRangeStmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(287)
		p.Match(YaklangParserFor)
	}
	p.SetState(298)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		p.SetState(291)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8727440654341) != 0 {
			{
				p.SetState(288)
				p.LeftExpressionList()
			}
			{
				p.SetState(289)
				_la = p.GetTokenStream().LA(1)

				if !(_la == YaklangParserAssignEq || _la == YaklangParserColonAssignEq) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(293)
			p.Match(YaklangParserRange)
		}

	case 2:
		p.SetState(295)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8727440654341) != 0 {
			{
				p.SetState(294)
				p.LeftExpressionList()
			}

		}
		{
			p.SetState(297)
			p.Match(YaklangParserIn)
		}

	}
	{
		p.SetState(300)
		p.expression(0)
	}
	{
		p.SetState(301)
		p.Block()
	}

	return localctx
}

// ISwitchStmtContext is an interface to support dynamic dispatch.
type ISwitchStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchStmtContext differentiates from other interfaces.
	IsSwitchStmtContext()
}

type SwitchStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStmtContext() *SwitchStmtContext {
	var p = new(SwitchStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_switchStmt
	return p
}

func (*SwitchStmtContext) IsSwitchStmtContext() {}

func NewSwitchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStmtContext {
	var p = new(SwitchStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_switchStmt

	return p
}

func (s *SwitchStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStmtContext) Switch() antlr.TerminalNode {
	return s.GetToken(YaklangParserSwitch, 0)
}

func (s *SwitchStmtContext) LBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBrace, 0)
}

func (s *SwitchStmtContext) RBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBrace, 0)
}

func (s *SwitchStmtContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SwitchStmtContext) AllCase() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserCase)
}

func (s *SwitchStmtContext) Case(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserCase, i)
}

func (s *SwitchStmtContext) AllExpressionList() []IExpressionListContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionListContext); ok {
			len++
		}
	}

	tst := make([]IExpressionListContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionListContext); ok {
			tst[i] = t.(IExpressionListContext)
			i++
		}
	}

	return tst
}

func (s *SwitchStmtContext) ExpressionList(i int) IExpressionListContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *SwitchStmtContext) AllColon() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserColon)
}

func (s *SwitchStmtContext) Colon(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserColon, i)
}

func (s *SwitchStmtContext) Default() antlr.TerminalNode {
	return s.GetToken(YaklangParserDefault, 0)
}

func (s *SwitchStmtContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *SwitchStmtContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *SwitchStmtContext) AllStatementList() []IStatementListContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementListContext); ok {
			len++
		}
	}

	tst := make([]IStatementListContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementListContext); ok {
			tst[i] = t.(IStatementListContext)
			i++
		}
	}

	return tst
}

func (s *SwitchStmtContext) StatementList(i int) IStatementListContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementListContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *SwitchStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitSwitchStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) SwitchStmt() (localctx ISwitchStmtContext) {
	this := p
	_ = this

	localctx = NewSwitchStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, YaklangParserRULE_switchStmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(303)
		p.Match(YaklangParserSwitch)
	}
	p.SetState(305)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(304)
			p.expression(0)
		}

	}
	{
		p.SetState(307)
		p.Match(YaklangParserLBrace)
	}
	p.SetState(322)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(311)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == YaklangParserLF {
				{
					p.SetState(308)
					p.Ws()
				}

				p.SetState(313)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(314)
				p.Match(YaklangParserCase)
			}
			{
				p.SetState(315)
				p.ExpressionList()
			}
			{
				p.SetState(316)
				p.Match(YaklangParserColon)
			}
			p.SetState(318)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(317)
					p.StatementList()
				}

			}

		}
		p.SetState(324)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext())
	}
	p.SetState(336)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext()) == 1 {
		p.SetState(328)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == YaklangParserLF {
			{
				p.SetState(325)
				p.Ws()
			}

			p.SetState(330)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(331)
			p.Match(YaklangParserDefault)
		}
		{
			p.SetState(332)
			p.Match(YaklangParserColon)
		}
		p.SetState(334)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(333)
				p.StatementList()
			}

		}

	}
	p.SetState(341)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserLF {
		{
			p.SetState(338)
			p.Ws()
		}

		p.SetState(343)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(344)
		p.Match(YaklangParserRBrace)
	}

	return localctx
}

// IIfStmtContext is an interface to support dynamic dispatch.
type IIfStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStmtContext differentiates from other interfaces.
	IsIfStmtContext()
}

type IfStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStmtContext() *IfStmtContext {
	var p = new(IfStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_ifStmt
	return p
}

func (*IfStmtContext) IsIfStmtContext() {}

func NewIfStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStmtContext {
	var p = new(IfStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_ifStmt

	return p
}

func (s *IfStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStmtContext) If() antlr.TerminalNode {
	return s.GetToken(YaklangParserIf, 0)
}

func (s *IfStmtContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *IfStmtContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfStmtContext) AllBlock() []IBlockContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBlockContext); ok {
			len++
		}
	}

	tst := make([]IBlockContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBlockContext); ok {
			tst[i] = t.(IBlockContext)
			i++
		}
	}

	return tst
}

func (s *IfStmtContext) Block(i int) IBlockContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *IfStmtContext) AllElif() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserElif)
}

func (s *IfStmtContext) Elif(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserElif, i)
}

func (s *IfStmtContext) ElseBlock() IElseBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElseBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElseBlockContext)
}

func (s *IfStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitIfStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) IfStmt() (localctx IIfStmtContext) {
	this := p
	_ = this

	localctx = NewIfStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, YaklangParserRULE_ifStmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(346)
		p.Match(YaklangParserIf)
	}
	{
		p.SetState(347)
		p.expression(0)
	}
	{
		p.SetState(348)
		p.Block()
	}
	p.SetState(355)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserElif {
		{
			p.SetState(349)
			p.Match(YaklangParserElif)
		}
		{
			p.SetState(350)
			p.expression(0)
		}
		{
			p.SetState(351)
			p.Block()
		}

		p.SetState(357)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(359)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserElse {
		{
			p.SetState(358)
			p.ElseBlock()
		}

	}

	return localctx
}

// IElseBlockContext is an interface to support dynamic dispatch.
type IElseBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElseBlockContext differentiates from other interfaces.
	IsElseBlockContext()
}

type ElseBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElseBlockContext() *ElseBlockContext {
	var p = new(ElseBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_elseBlock
	return p
}

func (*ElseBlockContext) IsElseBlockContext() {}

func NewElseBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElseBlockContext {
	var p = new(ElseBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_elseBlock

	return p
}

func (s *ElseBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *ElseBlockContext) Else() antlr.TerminalNode {
	return s.GetToken(YaklangParserElse, 0)
}

func (s *ElseBlockContext) IfStmt() IIfStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfStmtContext)
}

func (s *ElseBlockContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ElseBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElseBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElseBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitElseBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ElseBlock() (localctx IElseBlockContext) {
	this := p
	_ = this

	localctx = NewElseBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, YaklangParserRULE_elseBlock)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(361)
		p.Match(YaklangParserElse)
	}
	p.SetState(364)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserIf:
		{
			p.SetState(362)
			p.IfStmt()
		}

	case YaklangParserLBrace:
		{
			p.SetState(363)
			p.Block()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_block
	return p
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) LBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBrace, 0)
}

func (s *BlockContext) RBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBrace, 0)
}

func (s *BlockContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *BlockContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *BlockContext) StatementList() IStatementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Block() (localctx IBlockContext) {
	this := p
	_ = this

	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, YaklangParserRULE_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(366)
		p.Match(YaklangParserLBrace)
	}
	p.SetState(370)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(367)
				p.Ws()
			}

		}
		p.SetState(372)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext())
	}
	p.SetState(374)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(373)
			p.StatementList()
		}

	}
	p.SetState(379)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserLF {
		{
			p.SetState(376)
			p.Ws()
		}

		p.SetState(381)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(382)
		p.Match(YaklangParserRBrace)
	}

	return localctx
}

// IEmptyContext is an interface to support dynamic dispatch.
type IEmptyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmptyContext differentiates from other interfaces.
	IsEmptyContext()
}

type EmptyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmptyContext() *EmptyContext {
	var p = new(EmptyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_empty
	return p
}

func (*EmptyContext) IsEmptyContext() {}

func NewEmptyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EmptyContext {
	var p = new(EmptyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_empty

	return p
}

func (s *EmptyContext) GetParser() antlr.Parser { return s.parser }

func (s *EmptyContext) EOS() antlr.TerminalNode {
	return s.GetToken(YaklangParserEOS, 0)
}

func (s *EmptyContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(YaklangParserSemiColon, 0)
}

func (s *EmptyContext) Ws() IWsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *EmptyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EmptyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EmptyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitEmpty(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Empty() (localctx IEmptyContext) {
	this := p
	_ = this

	localctx = NewEmptyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, YaklangParserRULE_empty)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(387)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserEOS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(384)
			p.Match(YaklangParserEOS)
		}

	case YaklangParserSemiColon:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(385)
			p.Match(YaklangParserSemiColon)
		}

	case YaklangParserLF:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(386)
			p.Ws()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInplaceAssignOperatorContext is an interface to support dynamic dispatch.
type IInplaceAssignOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInplaceAssignOperatorContext differentiates from other interfaces.
	IsInplaceAssignOperatorContext()
}

type InplaceAssignOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInplaceAssignOperatorContext() *InplaceAssignOperatorContext {
	var p = new(InplaceAssignOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_inplaceAssignOperator
	return p
}

func (*InplaceAssignOperatorContext) IsInplaceAssignOperatorContext() {}

func NewInplaceAssignOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InplaceAssignOperatorContext {
	var p = new(InplaceAssignOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_inplaceAssignOperator

	return p
}

func (s *InplaceAssignOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *InplaceAssignOperatorContext) PlusEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserPlusEq, 0)
}

func (s *InplaceAssignOperatorContext) MinusEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserMinusEq, 0)
}

func (s *InplaceAssignOperatorContext) MulEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserMulEq, 0)
}

func (s *InplaceAssignOperatorContext) DivEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserDivEq, 0)
}

func (s *InplaceAssignOperatorContext) ModEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserModEq, 0)
}

func (s *InplaceAssignOperatorContext) AmpEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserAmpEq, 0)
}

func (s *InplaceAssignOperatorContext) BitAndEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserBitAndEq, 0)
}

func (s *InplaceAssignOperatorContext) BitOrEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserBitOrEq, 0)
}

func (s *InplaceAssignOperatorContext) LtLtEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserLtLtEq, 0)
}

func (s *InplaceAssignOperatorContext) GtGtEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserGtGtEq, 0)
}

func (s *InplaceAssignOperatorContext) BitAndNotEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserBitAndNotEq, 0)
}

func (s *InplaceAssignOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InplaceAssignOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InplaceAssignOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitInplaceAssignOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) InplaceAssignOperator() (localctx IInplaceAssignOperatorContext) {
	this := p
	_ = this

	localctx = NewInplaceAssignOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, YaklangParserRULE_inplaceAssignOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(389)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-76)) & ^0x3f) == 0 && ((int64(1)<<(_la-76))&2047) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IAssignExpressionContext is an interface to support dynamic dispatch.
type IAssignExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignExpressionContext differentiates from other interfaces.
	IsAssignExpressionContext()
}

type AssignExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignExpressionContext() *AssignExpressionContext {
	var p = new(AssignExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_assignExpression
	return p
}

func (*AssignExpressionContext) IsAssignExpressionContext() {}

func NewAssignExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignExpressionContext {
	var p = new(AssignExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_assignExpression

	return p
}

func (s *AssignExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignExpressionContext) LeftExpressionList() ILeftExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftExpressionListContext)
}

func (s *AssignExpressionContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *AssignExpressionContext) AssignEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserAssignEq, 0)
}

func (s *AssignExpressionContext) ColonAssignEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserColonAssignEq, 0)
}

func (s *AssignExpressionContext) LeftExpression() ILeftExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftExpressionContext)
}

func (s *AssignExpressionContext) PlusPlus() antlr.TerminalNode {
	return s.GetToken(YaklangParserPlusPlus, 0)
}

func (s *AssignExpressionContext) SubSub() antlr.TerminalNode {
	return s.GetToken(YaklangParserSubSub, 0)
}

func (s *AssignExpressionContext) InplaceAssignOperator() IInplaceAssignOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInplaceAssignOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInplaceAssignOperatorContext)
}

func (s *AssignExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AssignExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitAssignExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) AssignExpression() (localctx IAssignExpressionContext) {
	this := p
	_ = this

	localctx = NewAssignExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, YaklangParserRULE_assignExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(402)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(391)
			p.LeftExpressionList()
		}
		{
			p.SetState(392)
			_la = p.GetTokenStream().LA(1)

			if !(_la == YaklangParserAssignEq || _la == YaklangParserColonAssignEq) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(393)
			p.ExpressionList()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(395)
			p.LeftExpression()
		}
		{
			p.SetState(396)
			_la = p.GetTokenStream().LA(1)

			if !(_la == YaklangParserPlusPlus || _la == YaklangParserSubSub) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(398)
			p.LeftExpression()
		}
		{
			p.SetState(399)
			p.InplaceAssignOperator()
		}
		{
			p.SetState(400)
			p.expression(0)
		}

	}

	return localctx
}

// IDeclareVariableExpressionStmtContext is an interface to support dynamic dispatch.
type IDeclareVariableExpressionStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareVariableExpressionStmtContext differentiates from other interfaces.
	IsDeclareVariableExpressionStmtContext()
}

type DeclareVariableExpressionStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareVariableExpressionStmtContext() *DeclareVariableExpressionStmtContext {
	var p = new(DeclareVariableExpressionStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_declareVariableExpressionStmt
	return p
}

func (*DeclareVariableExpressionStmtContext) IsDeclareVariableExpressionStmtContext() {}

func NewDeclareVariableExpressionStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareVariableExpressionStmtContext {
	var p = new(DeclareVariableExpressionStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_declareVariableExpressionStmt

	return p
}

func (s *DeclareVariableExpressionStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareVariableExpressionStmtContext) DeclareVariableExpression() IDeclareVariableExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareVariableExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareVariableExpressionContext)
}

func (s *DeclareVariableExpressionStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareVariableExpressionStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareVariableExpressionStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitDeclareVariableExpressionStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) DeclareVariableExpressionStmt() (localctx IDeclareVariableExpressionStmtContext) {
	this := p
	_ = this

	localctx = NewDeclareVariableExpressionStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, YaklangParserRULE_declareVariableExpressionStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(404)
		p.DeclareVariableExpression()
	}

	return localctx
}

// IDeclareVariableExpressionContext is an interface to support dynamic dispatch.
type IDeclareVariableExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareVariableExpressionContext differentiates from other interfaces.
	IsDeclareVariableExpressionContext()
}

type DeclareVariableExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareVariableExpressionContext() *DeclareVariableExpressionContext {
	var p = new(DeclareVariableExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_declareVariableExpression
	return p
}

func (*DeclareVariableExpressionContext) IsDeclareVariableExpressionContext() {}

func NewDeclareVariableExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareVariableExpressionContext {
	var p = new(DeclareVariableExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_declareVariableExpression

	return p
}

func (s *DeclareVariableExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareVariableExpressionContext) DeclareVariableOnly() IDeclareVariableOnlyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareVariableOnlyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareVariableOnlyContext)
}

func (s *DeclareVariableExpressionContext) DeclareAndAssignExpression() IDeclareAndAssignExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareAndAssignExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareAndAssignExpressionContext)
}

func (s *DeclareVariableExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareVariableExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareVariableExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitDeclareVariableExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) DeclareVariableExpression() (localctx IDeclareVariableExpressionContext) {
	this := p
	_ = this

	localctx = NewDeclareVariableExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, YaklangParserRULE_declareVariableExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(408)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(406)
			p.DeclareVariableOnly()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(407)
			p.DeclareAndAssignExpression()
		}

	}

	return localctx
}

// IDeclareVariableOnlyContext is an interface to support dynamic dispatch.
type IDeclareVariableOnlyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareVariableOnlyContext differentiates from other interfaces.
	IsDeclareVariableOnlyContext()
}

type DeclareVariableOnlyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareVariableOnlyContext() *DeclareVariableOnlyContext {
	var p = new(DeclareVariableOnlyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_declareVariableOnly
	return p
}

func (*DeclareVariableOnlyContext) IsDeclareVariableOnlyContext() {}

func NewDeclareVariableOnlyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareVariableOnlyContext {
	var p = new(DeclareVariableOnlyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_declareVariableOnly

	return p
}

func (s *DeclareVariableOnlyContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareVariableOnlyContext) Var() antlr.TerminalNode {
	return s.GetToken(YaklangParserVar, 0)
}

func (s *DeclareVariableOnlyContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserIdentifier)
}

func (s *DeclareVariableOnlyContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, i)
}

func (s *DeclareVariableOnlyContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *DeclareVariableOnlyContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *DeclareVariableOnlyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareVariableOnlyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareVariableOnlyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitDeclareVariableOnly(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) DeclareVariableOnly() (localctx IDeclareVariableOnlyContext) {
	this := p
	_ = this

	localctx = NewDeclareVariableOnlyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, YaklangParserRULE_declareVariableOnly)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(410)
		p.Match(YaklangParserVar)
	}
	{
		p.SetState(411)
		p.Match(YaklangParserIdentifier)
	}
	p.SetState(416)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(412)
				p.Match(YaklangParserComma)
			}
			{
				p.SetState(413)
				p.Match(YaklangParserIdentifier)
			}

		}
		p.SetState(418)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext())
	}

	return localctx
}

// IDeclareAndAssignExpressionContext is an interface to support dynamic dispatch.
type IDeclareAndAssignExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareAndAssignExpressionContext differentiates from other interfaces.
	IsDeclareAndAssignExpressionContext()
}

type DeclareAndAssignExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareAndAssignExpressionContext() *DeclareAndAssignExpressionContext {
	var p = new(DeclareAndAssignExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_declareAndAssignExpression
	return p
}

func (*DeclareAndAssignExpressionContext) IsDeclareAndAssignExpressionContext() {}

func NewDeclareAndAssignExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareAndAssignExpressionContext {
	var p = new(DeclareAndAssignExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_declareAndAssignExpression

	return p
}

func (s *DeclareAndAssignExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareAndAssignExpressionContext) Var() antlr.TerminalNode {
	return s.GetToken(YaklangParserVar, 0)
}

func (s *DeclareAndAssignExpressionContext) LeftExpressionList() ILeftExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftExpressionListContext)
}

func (s *DeclareAndAssignExpressionContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *DeclareAndAssignExpressionContext) AssignEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserAssignEq, 0)
}

func (s *DeclareAndAssignExpressionContext) ColonAssignEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserColonAssignEq, 0)
}

func (s *DeclareAndAssignExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareAndAssignExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareAndAssignExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitDeclareAndAssignExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) DeclareAndAssignExpression() (localctx IDeclareAndAssignExpressionContext) {
	this := p
	_ = this

	localctx = NewDeclareAndAssignExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, YaklangParserRULE_declareAndAssignExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(419)
		p.Match(YaklangParserVar)
	}
	{
		p.SetState(420)
		p.LeftExpressionList()
	}
	{
		p.SetState(421)
		_la = p.GetTokenStream().LA(1)

		if !(_la == YaklangParserAssignEq || _la == YaklangParserColonAssignEq) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(422)
		p.ExpressionList()
	}

	return localctx
}

// ILeftExpressionListContext is an interface to support dynamic dispatch.
type ILeftExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeftExpressionListContext differentiates from other interfaces.
	IsLeftExpressionListContext()
}

type LeftExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeftExpressionListContext() *LeftExpressionListContext {
	var p = new(LeftExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_leftExpressionList
	return p
}

func (*LeftExpressionListContext) IsLeftExpressionListContext() {}

func NewLeftExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeftExpressionListContext {
	var p = new(LeftExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_leftExpressionList

	return p
}

func (s *LeftExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *LeftExpressionListContext) AllLeftExpression() []ILeftExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILeftExpressionContext); ok {
			len++
		}
	}

	tst := make([]ILeftExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILeftExpressionContext); ok {
			tst[i] = t.(ILeftExpressionContext)
			i++
		}
	}

	return tst
}

func (s *LeftExpressionListContext) LeftExpression(i int) ILeftExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftExpressionContext)
}

func (s *LeftExpressionListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *LeftExpressionListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *LeftExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeftExpressionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitLeftExpressionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) LeftExpressionList() (localctx ILeftExpressionListContext) {
	this := p
	_ = this

	localctx = NewLeftExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, YaklangParserRULE_leftExpressionList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(424)
		p.LeftExpression()
	}
	p.SetState(429)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserComma {
		{
			p.SetState(425)
			p.Match(YaklangParserComma)
		}
		{
			p.SetState(426)
			p.LeftExpression()
		}

		p.SetState(431)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUnaryOperatorContext is an interface to support dynamic dispatch.
type IUnaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryOperatorContext differentiates from other interfaces.
	IsUnaryOperatorContext()
}

type UnaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryOperatorContext() *UnaryOperatorContext {
	var p = new(UnaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_unaryOperator
	return p
}

func (*UnaryOperatorContext) IsUnaryOperatorContext() {}

func NewUnaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryOperatorContext {
	var p = new(UnaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_unaryOperator

	return p
}

func (s *UnaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryOperatorContext) Not() antlr.TerminalNode {
	return s.GetToken(YaklangParserNot, 0)
}

func (s *UnaryOperatorContext) Sub() antlr.TerminalNode {
	return s.GetToken(YaklangParserSub, 0)
}

func (s *UnaryOperatorContext) Plus() antlr.TerminalNode {
	return s.GetToken(YaklangParserPlus, 0)
}

func (s *UnaryOperatorContext) Xor() antlr.TerminalNode {
	return s.GetToken(YaklangParserXor, 0)
}

func (s *UnaryOperatorContext) Amp() antlr.TerminalNode {
	return s.GetToken(YaklangParserAmp, 0)
}

func (s *UnaryOperatorContext) Mul() antlr.TerminalNode {
	return s.GetToken(YaklangParserMul, 0)
}

func (s *UnaryOperatorContext) ChanIn() antlr.TerminalNode {
	return s.GetToken(YaklangParserChanIn, 0)
}

func (s *UnaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitUnaryOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) UnaryOperator() (localctx IUnaryOperatorContext) {
	this := p
	_ = this

	localctx = NewUnaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, YaklangParserRULE_unaryOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(432)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-41)) & ^0x3f) == 0 && ((int64(1)<<(_la-41))&1125899906977409) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBitBinaryOperatorContext is an interface to support dynamic dispatch.
type IBitBinaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitBinaryOperatorContext differentiates from other interfaces.
	IsBitBinaryOperatorContext()
}

type BitBinaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitBinaryOperatorContext() *BitBinaryOperatorContext {
	var p = new(BitBinaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_bitBinaryOperator
	return p
}

func (*BitBinaryOperatorContext) IsBitBinaryOperatorContext() {}

func NewBitBinaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitBinaryOperatorContext {
	var p = new(BitBinaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_bitBinaryOperator

	return p
}

func (s *BitBinaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *BitBinaryOperatorContext) LtLt() antlr.TerminalNode {
	return s.GetToken(YaklangParserLtLt, 0)
}

func (s *BitBinaryOperatorContext) GtGt() antlr.TerminalNode {
	return s.GetToken(YaklangParserGtGt, 0)
}

func (s *BitBinaryOperatorContext) Amp() antlr.TerminalNode {
	return s.GetToken(YaklangParserAmp, 0)
}

func (s *BitBinaryOperatorContext) AmpNot() antlr.TerminalNode {
	return s.GetToken(YaklangParserAmpNot, 0)
}

func (s *BitBinaryOperatorContext) Xand() antlr.TerminalNode {
	return s.GetToken(YaklangParserXand, 0)
}

func (s *BitBinaryOperatorContext) Xor() antlr.TerminalNode {
	return s.GetToken(YaklangParserXor, 0)
}

func (s *BitBinaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitBinaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitBinaryOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitBitBinaryOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) BitBinaryOperator() (localctx IBitBinaryOperatorContext) {
	this := p
	_ = this

	localctx = NewBitBinaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, YaklangParserRULE_bitBinaryOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(434)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&14443184742465536) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IAdditiveBinaryOperatorContext is an interface to support dynamic dispatch.
type IAdditiveBinaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdditiveBinaryOperatorContext differentiates from other interfaces.
	IsAdditiveBinaryOperatorContext()
}

type AdditiveBinaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditiveBinaryOperatorContext() *AdditiveBinaryOperatorContext {
	var p = new(AdditiveBinaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_additiveBinaryOperator
	return p
}

func (*AdditiveBinaryOperatorContext) IsAdditiveBinaryOperatorContext() {}

func NewAdditiveBinaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdditiveBinaryOperatorContext {
	var p = new(AdditiveBinaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_additiveBinaryOperator

	return p
}

func (s *AdditiveBinaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *AdditiveBinaryOperatorContext) Plus() antlr.TerminalNode {
	return s.GetToken(YaklangParserPlus, 0)
}

func (s *AdditiveBinaryOperatorContext) Sub() antlr.TerminalNode {
	return s.GetToken(YaklangParserSub, 0)
}

func (s *AdditiveBinaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveBinaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdditiveBinaryOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitAdditiveBinaryOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) AdditiveBinaryOperator() (localctx IAdditiveBinaryOperatorContext) {
	this := p
	_ = this

	localctx = NewAdditiveBinaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, YaklangParserRULE_additiveBinaryOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(436)
		_la = p.GetTokenStream().LA(1)

		if !(_la == YaklangParserPlus || _la == YaklangParserSub) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IMultiplicativeBinaryOperatorContext is an interface to support dynamic dispatch.
type IMultiplicativeBinaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiplicativeBinaryOperatorContext differentiates from other interfaces.
	IsMultiplicativeBinaryOperatorContext()
}

type MultiplicativeBinaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiplicativeBinaryOperatorContext() *MultiplicativeBinaryOperatorContext {
	var p = new(MultiplicativeBinaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_multiplicativeBinaryOperator
	return p
}

func (*MultiplicativeBinaryOperatorContext) IsMultiplicativeBinaryOperatorContext() {}

func NewMultiplicativeBinaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiplicativeBinaryOperatorContext {
	var p = new(MultiplicativeBinaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_multiplicativeBinaryOperator

	return p
}

func (s *MultiplicativeBinaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiplicativeBinaryOperatorContext) Mul() antlr.TerminalNode {
	return s.GetToken(YaklangParserMul, 0)
}

func (s *MultiplicativeBinaryOperatorContext) Div() antlr.TerminalNode {
	return s.GetToken(YaklangParserDiv, 0)
}

func (s *MultiplicativeBinaryOperatorContext) Mod() antlr.TerminalNode {
	return s.GetToken(YaklangParserMod, 0)
}

func (s *MultiplicativeBinaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeBinaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiplicativeBinaryOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMultiplicativeBinaryOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MultiplicativeBinaryOperator() (localctx IMultiplicativeBinaryOperatorContext) {
	this := p
	_ = this

	localctx = NewMultiplicativeBinaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, YaklangParserRULE_multiplicativeBinaryOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(438)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&15393162788864) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IComparisonBinaryOperatorContext is an interface to support dynamic dispatch.
type IComparisonBinaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparisonBinaryOperatorContext differentiates from other interfaces.
	IsComparisonBinaryOperatorContext()
}

type ComparisonBinaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparisonBinaryOperatorContext() *ComparisonBinaryOperatorContext {
	var p = new(ComparisonBinaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_comparisonBinaryOperator
	return p
}

func (*ComparisonBinaryOperatorContext) IsComparisonBinaryOperatorContext() {}

func NewComparisonBinaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisonBinaryOperatorContext {
	var p = new(ComparisonBinaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_comparisonBinaryOperator

	return p
}

func (s *ComparisonBinaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparisonBinaryOperatorContext) Gt() antlr.TerminalNode {
	return s.GetToken(YaklangParserGt, 0)
}

func (s *ComparisonBinaryOperatorContext) Lt() antlr.TerminalNode {
	return s.GetToken(YaklangParserLt, 0)
}

func (s *ComparisonBinaryOperatorContext) LtEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserLtEq, 0)
}

func (s *ComparisonBinaryOperatorContext) GtEq() antlr.TerminalNode {
	return s.GetToken(YaklangParserGtEq, 0)
}

func (s *ComparisonBinaryOperatorContext) Neq() antlr.TerminalNode {
	return s.GetToken(YaklangParserNeq, 0)
}

func (s *ComparisonBinaryOperatorContext) LtGt() antlr.TerminalNode {
	return s.GetToken(YaklangParserLtGt, 0)
}

func (s *ComparisonBinaryOperatorContext) Eq() antlr.TerminalNode {
	return s.GetToken(YaklangParserEq, 0)
}

func (s *ComparisonBinaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonBinaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisonBinaryOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitComparisonBinaryOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ComparisonBinaryOperator() (localctx IComparisonBinaryOperatorContext) {
	this := p
	_ = this

	localctx = NewComparisonBinaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, YaklangParserRULE_comparisonBinaryOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(440)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-45)) & ^0x3f) == 0 && ((int64(1)<<(_la-45))&35184372096517) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ILeftExpressionContext is an interface to support dynamic dispatch.
type ILeftExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeftExpressionContext differentiates from other interfaces.
	IsLeftExpressionContext()
}

type LeftExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeftExpressionContext() *LeftExpressionContext {
	var p = new(LeftExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_leftExpression
	return p
}

func (*LeftExpressionContext) IsLeftExpressionContext() {}

func NewLeftExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeftExpressionContext {
	var p = new(LeftExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_leftExpression

	return p
}

func (s *LeftExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LeftExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LeftExpressionContext) LeftMemberCall() ILeftMemberCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftMemberCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftMemberCallContext)
}

func (s *LeftExpressionContext) LeftSliceCall() ILeftSliceCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILeftSliceCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILeftSliceCallContext)
}

func (s *LeftExpressionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, 0)
}

func (s *LeftExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeftExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitLeftExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) LeftExpression() (localctx ILeftExpressionContext) {
	this := p
	_ = this

	localctx = NewLeftExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, YaklangParserRULE_leftExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(448)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(442)
			p.expression(0)
		}
		p.SetState(445)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case YaklangParserDot:
			{
				p.SetState(443)
				p.LeftMemberCall()
			}

		case YaklangParserLBracket:
			{
				p.SetState(444)
				p.LeftSliceCall()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(447)
			p.Match(YaklangParserIdentifier)
		}

	}

	return localctx
}

// ILeftMemberCallContext is an interface to support dynamic dispatch.
type ILeftMemberCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeftMemberCallContext differentiates from other interfaces.
	IsLeftMemberCallContext()
}

type LeftMemberCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeftMemberCallContext() *LeftMemberCallContext {
	var p = new(LeftMemberCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_leftMemberCall
	return p
}

func (*LeftMemberCallContext) IsLeftMemberCallContext() {}

func NewLeftMemberCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeftMemberCallContext {
	var p = new(LeftMemberCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_leftMemberCall

	return p
}

func (s *LeftMemberCallContext) GetParser() antlr.Parser { return s.parser }

func (s *LeftMemberCallContext) Dot() antlr.TerminalNode {
	return s.GetToken(YaklangParserDot, 0)
}

func (s *LeftMemberCallContext) Identifier() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, 0)
}

func (s *LeftMemberCallContext) IdentifierWithDollar() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifierWithDollar, 0)
}

func (s *LeftMemberCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftMemberCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeftMemberCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitLeftMemberCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) LeftMemberCall() (localctx ILeftMemberCallContext) {
	this := p
	_ = this

	localctx = NewLeftMemberCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, YaklangParserRULE_leftMemberCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(450)
		p.Match(YaklangParserDot)
	}
	{
		p.SetState(451)
		_la = p.GetTokenStream().LA(1)

		if !(_la == YaklangParserIdentifier || _la == YaklangParserIdentifierWithDollar) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ILeftSliceCallContext is an interface to support dynamic dispatch.
type ILeftSliceCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeftSliceCallContext differentiates from other interfaces.
	IsLeftSliceCallContext()
}

type LeftSliceCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeftSliceCallContext() *LeftSliceCallContext {
	var p = new(LeftSliceCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_leftSliceCall
	return p
}

func (*LeftSliceCallContext) IsLeftSliceCallContext() {}

func NewLeftSliceCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeftSliceCallContext {
	var p = new(LeftSliceCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_leftSliceCall

	return p
}

func (s *LeftSliceCallContext) GetParser() antlr.Parser { return s.parser }

func (s *LeftSliceCallContext) LBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBracket, 0)
}

func (s *LeftSliceCallContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LeftSliceCallContext) RBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBracket, 0)
}

func (s *LeftSliceCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftSliceCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeftSliceCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitLeftSliceCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) LeftSliceCall() (localctx ILeftSliceCallContext) {
	this := p
	_ = this

	localctx = NewLeftSliceCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, YaklangParserRULE_leftSliceCall)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(453)
		p.Match(YaklangParserLBracket)
	}
	{
		p.SetState(454)
		p.expression(0)
	}
	{
		p.SetState(455)
		p.Match(YaklangParserRBracket)
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) TypeLiteral() ITypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeLiteralContext)
}

func (s *ExpressionContext) LParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserLParen, 0)
}

func (s *ExpressionContext) RParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserRParen, 0)
}

func (s *ExpressionContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *ExpressionContext) AnonymousFunctionDecl() IAnonymousFunctionDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnonymousFunctionDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnonymousFunctionDeclContext)
}

func (s *ExpressionContext) Panic() antlr.TerminalNode {
	return s.GetToken(YaklangParserPanic, 0)
}

func (s *ExpressionContext) Recover() antlr.TerminalNode {
	return s.GetToken(YaklangParserRecover, 0)
}

func (s *ExpressionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, 0)
}

func (s *ExpressionContext) ParenExpression() IParenExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenExpressionContext)
}

func (s *ExpressionContext) InstanceCode() IInstanceCodeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstanceCodeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstanceCodeContext)
}

func (s *ExpressionContext) MakeExpression() IMakeExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMakeExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMakeExpressionContext)
}

func (s *ExpressionContext) UnaryOperator() IUnaryOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryOperatorContext)
}

func (s *ExpressionContext) BitBinaryOperator() IBitBinaryOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBitBinaryOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBitBinaryOperatorContext)
}

func (s *ExpressionContext) MultiplicativeBinaryOperator() IMultiplicativeBinaryOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMultiplicativeBinaryOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeBinaryOperatorContext)
}

func (s *ExpressionContext) AdditiveBinaryOperator() IAdditiveBinaryOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAdditiveBinaryOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAdditiveBinaryOperatorContext)
}

func (s *ExpressionContext) ComparisonBinaryOperator() IComparisonBinaryOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComparisonBinaryOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComparisonBinaryOperatorContext)
}

func (s *ExpressionContext) In() antlr.TerminalNode {
	return s.GetToken(YaklangParserIn, 0)
}

func (s *ExpressionContext) NotLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserNotLiteral, 0)
}

func (s *ExpressionContext) LogicAnd() antlr.TerminalNode {
	return s.GetToken(YaklangParserLogicAnd, 0)
}

func (s *ExpressionContext) LogicOr() antlr.TerminalNode {
	return s.GetToken(YaklangParserLogicOr, 0)
}

func (s *ExpressionContext) Question() antlr.TerminalNode {
	return s.GetToken(YaklangParserQuestion, 0)
}

func (s *ExpressionContext) Colon() antlr.TerminalNode {
	return s.GetToken(YaklangParserColon, 0)
}

func (s *ExpressionContext) ChanIn() antlr.TerminalNode {
	return s.GetToken(YaklangParserChanIn, 0)
}

func (s *ExpressionContext) MemberCall() IMemberCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberCallContext)
}

func (s *ExpressionContext) SliceCall() ISliceCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISliceCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISliceCallContext)
}

func (s *ExpressionContext) FunctionCall() IFunctionCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *YaklangParser) expression(_p int) (localctx IExpressionContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 78
	p.EnterRecursionRule(localctx, 78, YaklangParserRULE_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(506)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(458)
			p.TypeLiteral()
		}
		{
			p.SetState(459)
			p.Match(YaklangParserLParen)
		}
		p.SetState(463)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(460)
					p.Ws()
				}

			}
			p.SetState(465)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext())
		}
		p.SetState(467)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8727440654341) != 0 {
			{
				p.SetState(466)
				p.expression(0)
			}

		}
		p.SetState(472)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == YaklangParserLF {
			{
				p.SetState(469)
				p.Ws()
			}

			p.SetState(474)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(475)
			p.Match(YaklangParserRParen)
		}

	case 2:
		{
			p.SetState(477)
			p.Literal()
		}

	case 3:
		{
			p.SetState(478)
			p.AnonymousFunctionDecl()
		}

	case 4:
		{
			p.SetState(479)
			p.Match(YaklangParserPanic)
		}
		{
			p.SetState(480)
			p.Match(YaklangParserLParen)
		}
		p.SetState(484)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == YaklangParserLF {
			{
				p.SetState(481)
				p.Ws()
			}

			p.SetState(486)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(487)
			p.expression(0)
		}
		p.SetState(491)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == YaklangParserLF {
			{
				p.SetState(488)
				p.Ws()
			}

			p.SetState(493)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(494)
			p.Match(YaklangParserRParen)
		}

	case 5:
		{
			p.SetState(496)
			p.Match(YaklangParserRecover)
		}
		{
			p.SetState(497)
			p.Match(YaklangParserLParen)
		}
		{
			p.SetState(498)
			p.Match(YaklangParserRParen)
		}

	case 6:
		{
			p.SetState(499)
			p.Match(YaklangParserIdentifier)
		}

	case 7:
		{
			p.SetState(500)
			p.ParenExpression()
		}

	case 8:
		{
			p.SetState(501)
			p.InstanceCode()
		}

	case 9:
		{
			p.SetState(502)
			p.MakeExpression()
		}

	case 10:
		{
			p.SetState(503)
			p.UnaryOperator()
		}
		{
			p.SetState(504)
			p.expression(10)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(607)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(605)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(508)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(509)
					p.BitBinaryOperator()
				}
				p.SetState(513)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == YaklangParserLF {
					{
						p.SetState(510)
						p.Ws()
					}

					p.SetState(515)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(516)
					p.expression(10)
				}

			case 2:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(518)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(519)
					p.MultiplicativeBinaryOperator()
				}
				p.SetState(523)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == YaklangParserLF {
					{
						p.SetState(520)
						p.Ws()
					}

					p.SetState(525)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(526)
					p.expression(9)
				}

			case 3:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(528)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(529)
					p.AdditiveBinaryOperator()
				}
				p.SetState(533)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == YaklangParserLF {
					{
						p.SetState(530)
						p.Ws()
					}

					p.SetState(535)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(536)
					p.expression(8)
				}

			case 4:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(538)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(539)
					p.ComparisonBinaryOperator()
				}
				p.SetState(543)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == YaklangParserLF {
					{
						p.SetState(540)
						p.Ws()
					}

					p.SetState(545)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(546)
					p.expression(7)
				}

			case 5:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(548)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				p.SetState(550)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == YaklangParserNotLiteral {
					{
						p.SetState(549)
						p.Match(YaklangParserNotLiteral)
					}

				}
				{
					p.SetState(552)
					p.Match(YaklangParserIn)
				}
				{
					p.SetState(553)
					p.expression(6)
				}

			case 6:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(554)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(555)
					p.Match(YaklangParserLogicAnd)
				}
				p.SetState(559)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == YaklangParserLF {
					{
						p.SetState(556)
						p.Ws()
					}

					p.SetState(561)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(562)
					p.expression(5)
				}

			case 7:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(563)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(564)
					p.Match(YaklangParserLogicOr)
				}
				p.SetState(568)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == YaklangParserLF {
					{
						p.SetState(565)
						p.Ws()
					}

					p.SetState(570)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(571)
					p.expression(4)
				}

			case 8:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(572)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(573)
					p.Match(YaklangParserQuestion)
				}
				p.SetState(577)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == YaklangParserLF {
					{
						p.SetState(574)
						p.Ws()
					}

					p.SetState(579)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(580)
					p.expression(0)
				}
				p.SetState(584)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == YaklangParserLF {
					{
						p.SetState(581)
						p.Ws()
					}

					p.SetState(586)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(587)
					p.Match(YaklangParserColon)
				}
				p.SetState(591)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == YaklangParserLF {
					{
						p.SetState(588)
						p.Ws()
					}

					p.SetState(593)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(594)
					p.expression(3)
				}

			case 9:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(596)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(597)
					p.Match(YaklangParserChanIn)
				}
				{
					p.SetState(598)
					p.expression(2)
				}

			case 10:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, YaklangParserRULE_expression)
				p.SetState(599)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				p.SetState(603)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case YaklangParserDot:
					{
						p.SetState(600)
						p.MemberCall()
					}

				case YaklangParserLBracket:
					{
						p.SetState(601)
						p.SliceCall()
					}

				case YaklangParserLParen:
					{
						p.SetState(602)
						p.FunctionCall()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}

		}
		p.SetState(609)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())
	}

	return localctx
}

// IParenExpressionContext is an interface to support dynamic dispatch.
type IParenExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParenExpressionContext differentiates from other interfaces.
	IsParenExpressionContext()
}

type ParenExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenExpressionContext() *ParenExpressionContext {
	var p = new(ParenExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_parenExpression
	return p
}

func (*ParenExpressionContext) IsParenExpressionContext() {}

func NewParenExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParenExpressionContext {
	var p = new(ParenExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_parenExpression

	return p
}

func (s *ParenExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ParenExpressionContext) LParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserLParen, 0)
}

func (s *ParenExpressionContext) RParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserRParen, 0)
}

func (s *ParenExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParenExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParenExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitParenExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ParenExpression() (localctx IParenExpressionContext) {
	this := p
	_ = this

	localctx = NewParenExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, YaklangParserRULE_parenExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(610)
		p.Match(YaklangParserLParen)
	}
	p.SetState(612)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8727440654341) != 0 {
		{
			p.SetState(611)
			p.expression(0)
		}

	}
	{
		p.SetState(614)
		p.Match(YaklangParserRParen)
	}

	return localctx
}

// IMakeExpressionContext is an interface to support dynamic dispatch.
type IMakeExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMakeExpressionContext differentiates from other interfaces.
	IsMakeExpressionContext()
}

type MakeExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMakeExpressionContext() *MakeExpressionContext {
	var p = new(MakeExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_makeExpression
	return p
}

func (*MakeExpressionContext) IsMakeExpressionContext() {}

func NewMakeExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MakeExpressionContext {
	var p = new(MakeExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_makeExpression

	return p
}

func (s *MakeExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *MakeExpressionContext) Make() antlr.TerminalNode {
	return s.GetToken(YaklangParserMake, 0)
}

func (s *MakeExpressionContext) LParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserLParen, 0)
}

func (s *MakeExpressionContext) TypeLiteral() ITypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeLiteralContext)
}

func (s *MakeExpressionContext) RParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserRParen, 0)
}

func (s *MakeExpressionContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *MakeExpressionContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *MakeExpressionContext) Comma() antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, 0)
}

func (s *MakeExpressionContext) ExpressionListMultiline() IExpressionListMultilineContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListMultilineContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListMultilineContext)
}

func (s *MakeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MakeExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MakeExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMakeExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MakeExpression() (localctx IMakeExpressionContext) {
	this := p
	_ = this

	localctx = NewMakeExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, YaklangParserRULE_makeExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(616)
		p.Match(YaklangParserMake)
	}
	{
		p.SetState(617)
		p.Match(YaklangParserLParen)
	}
	p.SetState(621)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserLF {
		{
			p.SetState(618)
			p.Ws()
		}

		p.SetState(623)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(624)
		p.TypeLiteral()
	}
	p.SetState(633)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserComma {
		{
			p.SetState(625)
			p.Match(YaklangParserComma)
		}
		p.SetState(629)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == YaklangParserLF {
			{
				p.SetState(626)
				p.Ws()
			}

			p.SetState(631)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(632)
			p.ExpressionListMultiline()
		}

	}
	{
		p.SetState(635)
		p.Match(YaklangParserRParen)
	}

	return localctx
}

// ITypeLiteralContext is an interface to support dynamic dispatch.
type ITypeLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeLiteralContext differentiates from other interfaces.
	IsTypeLiteralContext()
}

type TypeLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeLiteralContext() *TypeLiteralContext {
	var p = new(TypeLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_typeLiteral
	return p
}

func (*TypeLiteralContext) IsTypeLiteralContext() {}

func NewTypeLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeLiteralContext {
	var p = new(TypeLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_typeLiteral

	return p
}

func (s *TypeLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeLiteralContext) VarTypeName() antlr.TerminalNode {
	return s.GetToken(YaklangParserVarTypeName, 0)
}

func (s *TypeLiteralContext) Var() antlr.TerminalNode {
	return s.GetToken(YaklangParserVar, 0)
}

func (s *TypeLiteralContext) SliceTypeLiteral() ISliceTypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISliceTypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISliceTypeLiteralContext)
}

func (s *TypeLiteralContext) MapTypeLiteral() IMapTypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapTypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapTypeLiteralContext)
}

func (s *TypeLiteralContext) Chan() antlr.TerminalNode {
	return s.GetToken(YaklangParserChan, 0)
}

func (s *TypeLiteralContext) TypeLiteral() ITypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeLiteralContext)
}

func (s *TypeLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTypeLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TypeLiteral() (localctx ITypeLiteralContext) {
	this := p
	_ = this

	localctx = NewTypeLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, YaklangParserRULE_typeLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(643)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserVarTypeName:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(637)
			p.Match(YaklangParserVarTypeName)
		}

	case YaklangParserVar:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(638)
			p.Match(YaklangParserVar)
		}

	case YaklangParserLBracket:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(639)
			p.SliceTypeLiteral()
		}

	case YaklangParserMap:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(640)
			p.MapTypeLiteral()
		}

	case YaklangParserChan:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(641)
			p.Match(YaklangParserChan)
		}
		{
			p.SetState(642)
			p.TypeLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISliceTypeLiteralContext is an interface to support dynamic dispatch.
type ISliceTypeLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceTypeLiteralContext differentiates from other interfaces.
	IsSliceTypeLiteralContext()
}

type SliceTypeLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceTypeLiteralContext() *SliceTypeLiteralContext {
	var p = new(SliceTypeLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_sliceTypeLiteral
	return p
}

func (*SliceTypeLiteralContext) IsSliceTypeLiteralContext() {}

func NewSliceTypeLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceTypeLiteralContext {
	var p = new(SliceTypeLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_sliceTypeLiteral

	return p
}

func (s *SliceTypeLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceTypeLiteralContext) LBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBracket, 0)
}

func (s *SliceTypeLiteralContext) RBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBracket, 0)
}

func (s *SliceTypeLiteralContext) TypeLiteral() ITypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeLiteralContext)
}

func (s *SliceTypeLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceTypeLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceTypeLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitSliceTypeLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) SliceTypeLiteral() (localctx ISliceTypeLiteralContext) {
	this := p
	_ = this

	localctx = NewSliceTypeLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, YaklangParserRULE_sliceTypeLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(645)
		p.Match(YaklangParserLBracket)
	}
	{
		p.SetState(646)
		p.Match(YaklangParserRBracket)
	}
	{
		p.SetState(647)
		p.TypeLiteral()
	}

	return localctx
}

// IMapTypeLiteralContext is an interface to support dynamic dispatch.
type IMapTypeLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapTypeLiteralContext differentiates from other interfaces.
	IsMapTypeLiteralContext()
}

type MapTypeLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapTypeLiteralContext() *MapTypeLiteralContext {
	var p = new(MapTypeLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_mapTypeLiteral
	return p
}

func (*MapTypeLiteralContext) IsMapTypeLiteralContext() {}

func NewMapTypeLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapTypeLiteralContext {
	var p = new(MapTypeLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_mapTypeLiteral

	return p
}

func (s *MapTypeLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *MapTypeLiteralContext) Map() antlr.TerminalNode {
	return s.GetToken(YaklangParserMap, 0)
}

func (s *MapTypeLiteralContext) LBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBracket, 0)
}

func (s *MapTypeLiteralContext) AllTypeLiteral() []ITypeLiteralContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeLiteralContext); ok {
			len++
		}
	}

	tst := make([]ITypeLiteralContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeLiteralContext); ok {
			tst[i] = t.(ITypeLiteralContext)
			i++
		}
	}

	return tst
}

func (s *MapTypeLiteralContext) TypeLiteral(i int) ITypeLiteralContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeLiteralContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeLiteralContext)
}

func (s *MapTypeLiteralContext) RBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBracket, 0)
}

func (s *MapTypeLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypeLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapTypeLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMapTypeLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MapTypeLiteral() (localctx IMapTypeLiteralContext) {
	this := p
	_ = this

	localctx = NewMapTypeLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, YaklangParserRULE_mapTypeLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(649)
		p.Match(YaklangParserMap)
	}
	{
		p.SetState(650)
		p.Match(YaklangParserLBracket)
	}
	{
		p.SetState(651)
		p.TypeLiteral()
	}
	{
		p.SetState(652)
		p.Match(YaklangParserRBracket)
	}
	{
		p.SetState(653)
		p.TypeLiteral()
	}

	return localctx
}

// IInstanceCodeContext is an interface to support dynamic dispatch.
type IInstanceCodeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInstanceCodeContext differentiates from other interfaces.
	IsInstanceCodeContext()
}

type InstanceCodeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstanceCodeContext() *InstanceCodeContext {
	var p = new(InstanceCodeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_instanceCode
	return p
}

func (*InstanceCodeContext) IsInstanceCodeContext() {}

func NewInstanceCodeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstanceCodeContext {
	var p = new(InstanceCodeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_instanceCode

	return p
}

func (s *InstanceCodeContext) GetParser() antlr.Parser { return s.parser }

func (s *InstanceCodeContext) Func() antlr.TerminalNode {
	return s.GetToken(YaklangParserFunc, 0)
}

func (s *InstanceCodeContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *InstanceCodeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstanceCodeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstanceCodeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitInstanceCode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) InstanceCode() (localctx IInstanceCodeContext) {
	this := p
	_ = this

	localctx = NewInstanceCodeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, YaklangParserRULE_instanceCode)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(655)
		p.Match(YaklangParserFunc)
	}
	{
		p.SetState(656)
		p.Block()
	}

	return localctx
}

// IAnonymousFunctionDeclContext is an interface to support dynamic dispatch.
type IAnonymousFunctionDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnonymousFunctionDeclContext differentiates from other interfaces.
	IsAnonymousFunctionDeclContext()
}

type AnonymousFunctionDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnonymousFunctionDeclContext() *AnonymousFunctionDeclContext {
	var p = new(AnonymousFunctionDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_anonymousFunctionDecl
	return p
}

func (*AnonymousFunctionDeclContext) IsAnonymousFunctionDeclContext() {}

func NewAnonymousFunctionDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnonymousFunctionDeclContext {
	var p = new(AnonymousFunctionDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_anonymousFunctionDecl

	return p
}

func (s *AnonymousFunctionDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *AnonymousFunctionDeclContext) Func() antlr.TerminalNode {
	return s.GetToken(YaklangParserFunc, 0)
}

func (s *AnonymousFunctionDeclContext) LParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserLParen, 0)
}

func (s *AnonymousFunctionDeclContext) RParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserRParen, 0)
}

func (s *AnonymousFunctionDeclContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *AnonymousFunctionDeclContext) FunctionNameDecl() IFunctionNameDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionNameDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionNameDeclContext)
}

func (s *AnonymousFunctionDeclContext) FunctionParamDecl() IFunctionParamDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionParamDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionParamDeclContext)
}

func (s *AnonymousFunctionDeclContext) EqGt() antlr.TerminalNode {
	return s.GetToken(YaklangParserEqGt, 0)
}

func (s *AnonymousFunctionDeclContext) Identifier() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, 0)
}

func (s *AnonymousFunctionDeclContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AnonymousFunctionDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnonymousFunctionDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnonymousFunctionDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitAnonymousFunctionDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) AnonymousFunctionDecl() (localctx IAnonymousFunctionDeclContext) {
	this := p
	_ = this

	localctx = NewAnonymousFunctionDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, YaklangParserRULE_anonymousFunctionDecl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(681)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserFunc:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(658)
			p.Match(YaklangParserFunc)
		}
		p.SetState(660)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == YaklangParserIdentifier {
			{
				p.SetState(659)
				p.FunctionNameDecl()
			}

		}
		{
			p.SetState(662)
			p.Match(YaklangParserLParen)
		}
		p.SetState(664)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == YaklangParserIdentifier || _la == YaklangParserLF {
			{
				p.SetState(663)
				p.FunctionParamDecl()
			}

		}
		{
			p.SetState(666)
			p.Match(YaklangParserRParen)
		}
		{
			p.SetState(667)
			p.Block()
		}

	case YaklangParserIdentifier, YaklangParserLParen:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(674)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case YaklangParserLParen:
			{
				p.SetState(668)
				p.Match(YaklangParserLParen)
			}
			p.SetState(670)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == YaklangParserIdentifier || _la == YaklangParserLF {
				{
					p.SetState(669)
					p.FunctionParamDecl()
				}

			}
			{
				p.SetState(672)
				p.Match(YaklangParserRParen)
			}

		case YaklangParserIdentifier:
			{
				p.SetState(673)
				p.Match(YaklangParserIdentifier)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(676)
			p.Match(YaklangParserEqGt)
		}
		p.SetState(679)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(677)
				p.Block()
			}

		case 2:
			{
				p.SetState(678)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFunctionNameDeclContext is an interface to support dynamic dispatch.
type IFunctionNameDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionNameDeclContext differentiates from other interfaces.
	IsFunctionNameDeclContext()
}

type FunctionNameDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionNameDeclContext() *FunctionNameDeclContext {
	var p = new(FunctionNameDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_functionNameDecl
	return p
}

func (*FunctionNameDeclContext) IsFunctionNameDeclContext() {}

func NewFunctionNameDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionNameDeclContext {
	var p = new(FunctionNameDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_functionNameDecl

	return p
}

func (s *FunctionNameDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionNameDeclContext) Identifier() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, 0)
}

func (s *FunctionNameDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionNameDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitFunctionNameDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) FunctionNameDecl() (localctx IFunctionNameDeclContext) {
	this := p
	_ = this

	localctx = NewFunctionNameDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, YaklangParserRULE_functionNameDecl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(683)
		p.Match(YaklangParserIdentifier)
	}

	return localctx
}

// IFunctionParamDeclContext is an interface to support dynamic dispatch.
type IFunctionParamDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionParamDeclContext differentiates from other interfaces.
	IsFunctionParamDeclContext()
}

type FunctionParamDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionParamDeclContext() *FunctionParamDeclContext {
	var p = new(FunctionParamDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_functionParamDecl
	return p
}

func (*FunctionParamDeclContext) IsFunctionParamDeclContext() {}

func NewFunctionParamDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionParamDeclContext {
	var p = new(FunctionParamDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_functionParamDecl

	return p
}

func (s *FunctionParamDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionParamDeclContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserIdentifier)
}

func (s *FunctionParamDeclContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, i)
}

func (s *FunctionParamDeclContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *FunctionParamDeclContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *FunctionParamDeclContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *FunctionParamDeclContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *FunctionParamDeclContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(YaklangParserEllipsis, 0)
}

func (s *FunctionParamDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionParamDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionParamDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitFunctionParamDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) FunctionParamDecl() (localctx IFunctionParamDeclContext) {
	this := p
	_ = this

	localctx = NewFunctionParamDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, YaklangParserRULE_functionParamDecl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(688)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserLF {
		{
			p.SetState(685)
			p.Ws()
		}

		p.SetState(690)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(691)
		p.Match(YaklangParserIdentifier)
	}
	p.SetState(708)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(695)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == YaklangParserLF {
				{
					p.SetState(692)
					p.Ws()
				}

				p.SetState(697)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(698)
				p.Match(YaklangParserComma)
			}
			p.SetState(702)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == YaklangParserLF {
				{
					p.SetState(699)
					p.Ws()
				}

				p.SetState(704)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(705)
				p.Match(YaklangParserIdentifier)
			}

		}
		p.SetState(710)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext())
	}
	p.SetState(712)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserEllipsis {
		{
			p.SetState(711)
			p.Match(YaklangParserEllipsis)
		}

	}
	p.SetState(717)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(714)
				p.Ws()
			}

		}
		p.SetState(719)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext())
	}
	p.SetState(721)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserComma {
		{
			p.SetState(720)
			p.Match(YaklangParserComma)
		}

	}
	p.SetState(726)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserLF {
		{
			p.SetState(723)
			p.Ws()
		}

		p.SetState(728)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunctionCallContext is an interface to support dynamic dispatch.
type IFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallContext differentiates from other interfaces.
	IsFunctionCallContext()
}

type FunctionCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallContext() *FunctionCallContext {
	var p = new(FunctionCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_functionCall
	return p
}

func (*FunctionCallContext) IsFunctionCallContext() {}

func NewFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallContext {
	var p = new(FunctionCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_functionCall

	return p
}

func (s *FunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallContext) LParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserLParen, 0)
}

func (s *FunctionCallContext) RParen() antlr.TerminalNode {
	return s.GetToken(YaklangParserRParen, 0)
}

func (s *FunctionCallContext) OrdinaryArguments() IOrdinaryArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdinaryArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdinaryArgumentsContext)
}

func (s *FunctionCallContext) Wavy() antlr.TerminalNode {
	return s.GetToken(YaklangParserWavy, 0)
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) FunctionCall() (localctx IFunctionCallContext) {
	this := p
	_ = this

	localctx = NewFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, YaklangParserRULE_functionCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(729)
		p.Match(YaklangParserLParen)
	}
	p.SetState(731)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8744620523525) != 0 {
		{
			p.SetState(730)
			p.OrdinaryArguments()
		}

	}
	{
		p.SetState(733)
		p.Match(YaklangParserRParen)
	}
	p.SetState(735)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(734)
			p.Match(YaklangParserWavy)
		}

	}

	return localctx
}

// IOrdinaryArgumentsContext is an interface to support dynamic dispatch.
type IOrdinaryArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrdinaryArgumentsContext differentiates from other interfaces.
	IsOrdinaryArgumentsContext()
}

type OrdinaryArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrdinaryArgumentsContext() *OrdinaryArgumentsContext {
	var p = new(OrdinaryArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_ordinaryArguments
	return p
}

func (*OrdinaryArgumentsContext) IsOrdinaryArgumentsContext() {}

func NewOrdinaryArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrdinaryArgumentsContext {
	var p = new(OrdinaryArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_ordinaryArguments

	return p
}

func (s *OrdinaryArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *OrdinaryArgumentsContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *OrdinaryArgumentsContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OrdinaryArgumentsContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *OrdinaryArgumentsContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *OrdinaryArgumentsContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *OrdinaryArgumentsContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *OrdinaryArgumentsContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(YaklangParserEllipsis, 0)
}

func (s *OrdinaryArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrdinaryArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrdinaryArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitOrdinaryArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) OrdinaryArguments() (localctx IOrdinaryArgumentsContext) {
	this := p
	_ = this

	localctx = NewOrdinaryArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, YaklangParserRULE_ordinaryArguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(740)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserLF {
		{
			p.SetState(737)
			p.Ws()
		}

		p.SetState(742)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(743)
		p.expression(0)
	}
	p.SetState(760)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(747)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == YaklangParserLF {
				{
					p.SetState(744)
					p.Ws()
				}

				p.SetState(749)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(750)
				p.Match(YaklangParserComma)
			}
			p.SetState(754)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == YaklangParserLF {
				{
					p.SetState(751)
					p.Ws()
				}

				p.SetState(756)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(757)
				p.expression(0)
			}

		}
		p.SetState(762)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext())
	}
	p.SetState(764)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserEllipsis {
		{
			p.SetState(763)
			p.Match(YaklangParserEllipsis)
		}

	}
	p.SetState(769)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(766)
				p.Ws()
			}

		}
		p.SetState(771)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext())
	}
	p.SetState(773)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserComma {
		{
			p.SetState(772)
			p.Match(YaklangParserComma)
		}

	}
	p.SetState(778)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserLF {
		{
			p.SetState(775)
			p.Ws()
		}

		p.SetState(780)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMemberCallContext is an interface to support dynamic dispatch.
type IMemberCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberCallContext differentiates from other interfaces.
	IsMemberCallContext()
}

type MemberCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberCallContext() *MemberCallContext {
	var p = new(MemberCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_memberCall
	return p
}

func (*MemberCallContext) IsMemberCallContext() {}

func NewMemberCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberCallContext {
	var p = new(MemberCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_memberCall

	return p
}

func (s *MemberCallContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberCallContext) Dot() antlr.TerminalNode {
	return s.GetToken(YaklangParserDot, 0)
}

func (s *MemberCallContext) Identifier() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifier, 0)
}

func (s *MemberCallContext) IdentifierWithDollar() antlr.TerminalNode {
	return s.GetToken(YaklangParserIdentifierWithDollar, 0)
}

func (s *MemberCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMemberCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MemberCall() (localctx IMemberCallContext) {
	this := p
	_ = this

	localctx = NewMemberCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, YaklangParserRULE_memberCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(781)
		p.Match(YaklangParserDot)
	}
	{
		p.SetState(782)
		_la = p.GetTokenStream().LA(1)

		if !(_la == YaklangParserIdentifier || _la == YaklangParserIdentifierWithDollar) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISliceCallContext is an interface to support dynamic dispatch.
type ISliceCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceCallContext differentiates from other interfaces.
	IsSliceCallContext()
}

type SliceCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceCallContext() *SliceCallContext {
	var p = new(SliceCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_sliceCall
	return p
}

func (*SliceCallContext) IsSliceCallContext() {}

func NewSliceCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceCallContext {
	var p = new(SliceCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_sliceCall

	return p
}

func (s *SliceCallContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceCallContext) LBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBracket, 0)
}

func (s *SliceCallContext) AllColon() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserColon)
}

func (s *SliceCallContext) Colon(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserColon, i)
}

func (s *SliceCallContext) RBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBracket, 0)
}

func (s *SliceCallContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *SliceCallContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SliceCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitSliceCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) SliceCall() (localctx ISliceCallContext) {
	this := p
	_ = this

	localctx = NewSliceCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, YaklangParserRULE_sliceCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(810)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(784)
			p.Match(YaklangParserLBracket)
		}
		p.SetState(786)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8727440654341) != 0 {
			{
				p.SetState(785)
				p.expression(0)
			}

		}
		{
			p.SetState(788)
			p.Match(YaklangParserColon)
		}
		p.SetState(790)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8727440654341) != 0 {
			{
				p.SetState(789)
				p.expression(0)
			}

		}
		{
			p.SetState(792)
			p.Match(YaklangParserColon)
		}
		p.SetState(794)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8727440654341) != 0 {
			{
				p.SetState(793)
				p.expression(0)
			}

		}
		{
			p.SetState(796)
			p.Match(YaklangParserRBracket)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(797)
			p.Match(YaklangParserLBracket)
		}
		p.SetState(799)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8727440654341) != 0 {
			{
				p.SetState(798)
				p.expression(0)
			}

		}
		{
			p.SetState(801)
			p.Match(YaklangParserColon)
		}
		p.SetState(803)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8727440654341) != 0 {
			{
				p.SetState(802)
				p.expression(0)
			}

		}
		{
			p.SetState(805)
			p.Match(YaklangParserRBracket)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(806)
			p.Match(YaklangParserLBracket)
		}
		{
			p.SetState(807)
			p.expression(0)
		}
		{
			p.SetState(808)
			p.Match(YaklangParserRBracket)
		}

	}

	return localctx
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_literal
	return p
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) TemplateStringLiteral() ITemplateStringLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateStringLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateStringLiteralContext)
}

func (s *LiteralContext) StringLiteral() IStringLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *LiteralContext) NumericLiteral() INumericLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericLiteralContext)
}

func (s *LiteralContext) CharacterLiteral() ICharacterLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICharacterLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICharacterLiteralContext)
}

func (s *LiteralContext) UndefinedLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserUndefinedLiteral, 0)
}

func (s *LiteralContext) NilLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserNilLiteral, 0)
}

func (s *LiteralContext) BoolLiteral() IBoolLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBoolLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBoolLiteralContext)
}

func (s *LiteralContext) MapLiteral() IMapLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapLiteralContext)
}

func (s *LiteralContext) SliceTypedLiteral() ISliceTypedLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISliceTypedLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISliceTypedLiteralContext)
}

func (s *LiteralContext) TypeLiteral() ITypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeLiteralContext)
}

func (s *LiteralContext) SliceLiteral() ISliceLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISliceLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISliceLiteralContext)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Literal() (localctx ILiteralContext) {
	this := p
	_ = this

	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, YaklangParserRULE_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(823)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(812)
			p.TemplateStringLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(813)
			p.StringLiteral()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(814)
			p.NumericLiteral()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(815)
			p.CharacterLiteral()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(816)
			p.Match(YaklangParserUndefinedLiteral)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(817)
			p.Match(YaklangParserNilLiteral)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(818)
			p.BoolLiteral()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(819)
			p.MapLiteral()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(820)
			p.SliceTypedLiteral()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(821)
			p.TypeLiteral()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(822)
			p.SliceLiteral()
		}

	}

	return localctx
}

// INumericLiteralContext is an interface to support dynamic dispatch.
type INumericLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumericLiteralContext differentiates from other interfaces.
	IsNumericLiteralContext()
}

type NumericLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumericLiteralContext() *NumericLiteralContext {
	var p = new(NumericLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_numericLiteral
	return p
}

func (*NumericLiteralContext) IsNumericLiteralContext() {}

func NewNumericLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumericLiteralContext {
	var p = new(NumericLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_numericLiteral

	return p
}

func (s *NumericLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NumericLiteralContext) IntegerLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserIntegerLiteral, 0)
}

func (s *NumericLiteralContext) FloatLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserFloatLiteral, 0)
}

func (s *NumericLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumericLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitNumericLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) NumericLiteral() (localctx INumericLiteralContext) {
	this := p
	_ = this

	localctx = NewNumericLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, YaklangParserRULE_numericLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(825)
		_la = p.GetTokenStream().LA(1)

		if !(_la == YaklangParserIntegerLiteral || _la == YaklangParserFloatLiteral) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IStringLiteralContext is an interface to support dynamic dispatch.
type IStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringLiteralContext differentiates from other interfaces.
	IsStringLiteralContext()
}

type StringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringLiteralContext() *StringLiteralContext {
	var p = new(StringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_stringLiteral
	return p
}

func (*StringLiteralContext) IsStringLiteralContext() {}

func NewStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringLiteralContext {
	var p = new(StringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_stringLiteral

	return p
}

func (s *StringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *StringLiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserStringLiteral, 0)
}

func (s *StringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) StringLiteral() (localctx IStringLiteralContext) {
	this := p
	_ = this

	localctx = NewStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, YaklangParserRULE_stringLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(827)
		p.Match(YaklangParserStringLiteral)
	}

	return localctx
}

// ITemplateSingleQuoteStringLiteralContext is an interface to support dynamic dispatch.
type ITemplateSingleQuoteStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateSingleQuoteStringLiteralContext differentiates from other interfaces.
	IsTemplateSingleQuoteStringLiteralContext()
}

type TemplateSingleQuoteStringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateSingleQuoteStringLiteralContext() *TemplateSingleQuoteStringLiteralContext {
	var p = new(TemplateSingleQuoteStringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_templateSingleQuoteStringLiteral
	return p
}

func (*TemplateSingleQuoteStringLiteralContext) IsTemplateSingleQuoteStringLiteralContext() {}

func NewTemplateSingleQuoteStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateSingleQuoteStringLiteralContext {
	var p = new(TemplateSingleQuoteStringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_templateSingleQuoteStringLiteral

	return p
}

func (s *TemplateSingleQuoteStringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateSingleQuoteStringLiteralContext) TemplateSingleQuoteStringStart() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateSingleQuoteStringStart, 0)
}

func (s *TemplateSingleQuoteStringLiteralContext) TemplateSingleQuoteStringCharacterStringEnd() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateSingleQuoteStringCharacterStringEnd, 0)
}

func (s *TemplateSingleQuoteStringLiteralContext) AllTemplateSingleQuoteStringAtom() []ITemplateSingleQuoteStringAtomContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITemplateSingleQuoteStringAtomContext); ok {
			len++
		}
	}

	tst := make([]ITemplateSingleQuoteStringAtomContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITemplateSingleQuoteStringAtomContext); ok {
			tst[i] = t.(ITemplateSingleQuoteStringAtomContext)
			i++
		}
	}

	return tst
}

func (s *TemplateSingleQuoteStringLiteralContext) TemplateSingleQuoteStringAtom(i int) ITemplateSingleQuoteStringAtomContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateSingleQuoteStringAtomContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateSingleQuoteStringAtomContext)
}

func (s *TemplateSingleQuoteStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateSingleQuoteStringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateSingleQuoteStringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTemplateSingleQuoteStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TemplateSingleQuoteStringLiteral() (localctx ITemplateSingleQuoteStringLiteralContext) {
	this := p
	_ = this

	localctx = NewTemplateSingleQuoteStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, YaklangParserRULE_templateSingleQuoteStringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(829)
		p.Match(YaklangParserTemplateSingleQuoteStringStart)
	}
	p.SetState(833)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserTemplateSingleQuoteStringCharacter || _la == YaklangParserTemplateSingleQuoteStringStartExpression {
		{
			p.SetState(830)
			p.TemplateSingleQuoteStringAtom()
		}

		p.SetState(835)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(836)
		p.Match(YaklangParserTemplateSingleQuoteStringCharacterStringEnd)
	}

	return localctx
}

// ITemplateDoubleQuoteStringLiteralContext is an interface to support dynamic dispatch.
type ITemplateDoubleQuoteStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateDoubleQuoteStringLiteralContext differentiates from other interfaces.
	IsTemplateDoubleQuoteStringLiteralContext()
}

type TemplateDoubleQuoteStringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateDoubleQuoteStringLiteralContext() *TemplateDoubleQuoteStringLiteralContext {
	var p = new(TemplateDoubleQuoteStringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_templateDoubleQuoteStringLiteral
	return p
}

func (*TemplateDoubleQuoteStringLiteralContext) IsTemplateDoubleQuoteStringLiteralContext() {}

func NewTemplateDoubleQuoteStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateDoubleQuoteStringLiteralContext {
	var p = new(TemplateDoubleQuoteStringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_templateDoubleQuoteStringLiteral

	return p
}

func (s *TemplateDoubleQuoteStringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateDoubleQuoteStringLiteralContext) TemplateDoubleQuoteStringStart() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateDoubleQuoteStringStart, 0)
}

func (s *TemplateDoubleQuoteStringLiteralContext) TemplateDoubleQuoteStringCharacterStringEnd() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateDoubleQuoteStringCharacterStringEnd, 0)
}

func (s *TemplateDoubleQuoteStringLiteralContext) AllTemplateDoubleQuoteStringAtom() []ITemplateDoubleQuoteStringAtomContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITemplateDoubleQuoteStringAtomContext); ok {
			len++
		}
	}

	tst := make([]ITemplateDoubleQuoteStringAtomContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITemplateDoubleQuoteStringAtomContext); ok {
			tst[i] = t.(ITemplateDoubleQuoteStringAtomContext)
			i++
		}
	}

	return tst
}

func (s *TemplateDoubleQuoteStringLiteralContext) TemplateDoubleQuoteStringAtom(i int) ITemplateDoubleQuoteStringAtomContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateDoubleQuoteStringAtomContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateDoubleQuoteStringAtomContext)
}

func (s *TemplateDoubleQuoteStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateDoubleQuoteStringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateDoubleQuoteStringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTemplateDoubleQuoteStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TemplateDoubleQuoteStringLiteral() (localctx ITemplateDoubleQuoteStringLiteralContext) {
	this := p
	_ = this

	localctx = NewTemplateDoubleQuoteStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, YaklangParserRULE_templateDoubleQuoteStringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(838)
		p.Match(YaklangParserTemplateDoubleQuoteStringStart)
	}
	p.SetState(842)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserTemplateDoubleQuoteStringCharacter || _la == YaklangParserTemplateDoubleQuoteStringStartExpression {
		{
			p.SetState(839)
			p.TemplateDoubleQuoteStringAtom()
		}

		p.SetState(844)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(845)
		p.Match(YaklangParserTemplateDoubleQuoteStringCharacterStringEnd)
	}

	return localctx
}

// ITemplateBackTickStringLiteralContext is an interface to support dynamic dispatch.
type ITemplateBackTickStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateBackTickStringLiteralContext differentiates from other interfaces.
	IsTemplateBackTickStringLiteralContext()
}

type TemplateBackTickStringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateBackTickStringLiteralContext() *TemplateBackTickStringLiteralContext {
	var p = new(TemplateBackTickStringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_templateBackTickStringLiteral
	return p
}

func (*TemplateBackTickStringLiteralContext) IsTemplateBackTickStringLiteralContext() {}

func NewTemplateBackTickStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateBackTickStringLiteralContext {
	var p = new(TemplateBackTickStringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_templateBackTickStringLiteral

	return p
}

func (s *TemplateBackTickStringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateBackTickStringLiteralContext) TemplateBackTickStringStart() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateBackTickStringStart, 0)
}

func (s *TemplateBackTickStringLiteralContext) TemplateBackTickStringCharacterStringEnd() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateBackTickStringCharacterStringEnd, 0)
}

func (s *TemplateBackTickStringLiteralContext) AllTemplateBackTickStringAtom() []ITemplateBackTickStringAtomContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITemplateBackTickStringAtomContext); ok {
			len++
		}
	}

	tst := make([]ITemplateBackTickStringAtomContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITemplateBackTickStringAtomContext); ok {
			tst[i] = t.(ITemplateBackTickStringAtomContext)
			i++
		}
	}

	return tst
}

func (s *TemplateBackTickStringLiteralContext) TemplateBackTickStringAtom(i int) ITemplateBackTickStringAtomContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateBackTickStringAtomContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateBackTickStringAtomContext)
}

func (s *TemplateBackTickStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateBackTickStringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateBackTickStringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTemplateBackTickStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TemplateBackTickStringLiteral() (localctx ITemplateBackTickStringLiteralContext) {
	this := p
	_ = this

	localctx = NewTemplateBackTickStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, YaklangParserRULE_templateBackTickStringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(847)
		p.Match(YaklangParserTemplateBackTickStringStart)
	}
	p.SetState(851)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserTemplateBackTickStringCharacter || _la == YaklangParserTemplateBackTickStringStartExpression {
		{
			p.SetState(848)
			p.TemplateBackTickStringAtom()
		}

		p.SetState(853)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(854)
		p.Match(YaklangParserTemplateBackTickStringCharacterStringEnd)
	}

	return localctx
}

// ITemplateStringLiteralContext is an interface to support dynamic dispatch.
type ITemplateStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateStringLiteralContext differentiates from other interfaces.
	IsTemplateStringLiteralContext()
}

type TemplateStringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateStringLiteralContext() *TemplateStringLiteralContext {
	var p = new(TemplateStringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_templateStringLiteral
	return p
}

func (*TemplateStringLiteralContext) IsTemplateStringLiteralContext() {}

func NewTemplateStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateStringLiteralContext {
	var p = new(TemplateStringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_templateStringLiteral

	return p
}

func (s *TemplateStringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateStringLiteralContext) TemplateSingleQuoteStringLiteral() ITemplateSingleQuoteStringLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateSingleQuoteStringLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateSingleQuoteStringLiteralContext)
}

func (s *TemplateStringLiteralContext) TemplateDoubleQuoteStringLiteral() ITemplateDoubleQuoteStringLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateDoubleQuoteStringLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateDoubleQuoteStringLiteralContext)
}

func (s *TemplateStringLiteralContext) TemplateBackTickStringLiteral() ITemplateBackTickStringLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateBackTickStringLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateBackTickStringLiteralContext)
}

func (s *TemplateStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateStringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateStringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTemplateStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TemplateStringLiteral() (localctx ITemplateStringLiteralContext) {
	this := p
	_ = this

	localctx = NewTemplateStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, YaklangParserRULE_templateStringLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(859)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserTemplateSingleQuoteStringStart:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(856)
			p.TemplateSingleQuoteStringLiteral()
		}

	case YaklangParserTemplateDoubleQuoteStringStart:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(857)
			p.TemplateDoubleQuoteStringLiteral()
		}

	case YaklangParserTemplateBackTickStringStart:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(858)
			p.TemplateBackTickStringLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateSingleQuoteStringAtomContext is an interface to support dynamic dispatch.
type ITemplateSingleQuoteStringAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateSingleQuoteStringAtomContext differentiates from other interfaces.
	IsTemplateSingleQuoteStringAtomContext()
}

type TemplateSingleQuoteStringAtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateSingleQuoteStringAtomContext() *TemplateSingleQuoteStringAtomContext {
	var p = new(TemplateSingleQuoteStringAtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_templateSingleQuoteStringAtom
	return p
}

func (*TemplateSingleQuoteStringAtomContext) IsTemplateSingleQuoteStringAtomContext() {}

func NewTemplateSingleQuoteStringAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateSingleQuoteStringAtomContext {
	var p = new(TemplateSingleQuoteStringAtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_templateSingleQuoteStringAtom

	return p
}

func (s *TemplateSingleQuoteStringAtomContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateSingleQuoteStringAtomContext) AllTemplateSingleQuoteStringCharacter() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserTemplateSingleQuoteStringCharacter)
}

func (s *TemplateSingleQuoteStringAtomContext) TemplateSingleQuoteStringCharacter(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateSingleQuoteStringCharacter, i)
}

func (s *TemplateSingleQuoteStringAtomContext) TemplateSingleQuoteStringStartExpression() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateSingleQuoteStringStartExpression, 0)
}

func (s *TemplateSingleQuoteStringAtomContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TemplateSingleQuoteStringAtomContext) TemplateCloseBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateCloseBrace, 0)
}

func (s *TemplateSingleQuoteStringAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateSingleQuoteStringAtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateSingleQuoteStringAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTemplateSingleQuoteStringAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TemplateSingleQuoteStringAtom() (localctx ITemplateSingleQuoteStringAtomContext) {
	this := p
	_ = this

	localctx = NewTemplateSingleQuoteStringAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, YaklangParserRULE_templateSingleQuoteStringAtom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(870)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserTemplateSingleQuoteStringCharacter:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(862)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(861)
					p.Match(YaklangParserTemplateSingleQuoteStringCharacter)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(864)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext())
		}

	case YaklangParserTemplateSingleQuoteStringStartExpression:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(866)
			p.Match(YaklangParserTemplateSingleQuoteStringStartExpression)
		}
		{
			p.SetState(867)
			p.expression(0)
		}
		{
			p.SetState(868)
			p.Match(YaklangParserTemplateCloseBrace)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateDoubleQuoteStringAtomContext is an interface to support dynamic dispatch.
type ITemplateDoubleQuoteStringAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateDoubleQuoteStringAtomContext differentiates from other interfaces.
	IsTemplateDoubleQuoteStringAtomContext()
}

type TemplateDoubleQuoteStringAtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateDoubleQuoteStringAtomContext() *TemplateDoubleQuoteStringAtomContext {
	var p = new(TemplateDoubleQuoteStringAtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_templateDoubleQuoteStringAtom
	return p
}

func (*TemplateDoubleQuoteStringAtomContext) IsTemplateDoubleQuoteStringAtomContext() {}

func NewTemplateDoubleQuoteStringAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateDoubleQuoteStringAtomContext {
	var p = new(TemplateDoubleQuoteStringAtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_templateDoubleQuoteStringAtom

	return p
}

func (s *TemplateDoubleQuoteStringAtomContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateDoubleQuoteStringAtomContext) AllTemplateDoubleQuoteStringCharacter() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserTemplateDoubleQuoteStringCharacter)
}

func (s *TemplateDoubleQuoteStringAtomContext) TemplateDoubleQuoteStringCharacter(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateDoubleQuoteStringCharacter, i)
}

func (s *TemplateDoubleQuoteStringAtomContext) TemplateDoubleQuoteStringStartExpression() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateDoubleQuoteStringStartExpression, 0)
}

func (s *TemplateDoubleQuoteStringAtomContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TemplateDoubleQuoteStringAtomContext) TemplateCloseBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateCloseBrace, 0)
}

func (s *TemplateDoubleQuoteStringAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateDoubleQuoteStringAtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateDoubleQuoteStringAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTemplateDoubleQuoteStringAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TemplateDoubleQuoteStringAtom() (localctx ITemplateDoubleQuoteStringAtomContext) {
	this := p
	_ = this

	localctx = NewTemplateDoubleQuoteStringAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, YaklangParserRULE_templateDoubleQuoteStringAtom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(881)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserTemplateDoubleQuoteStringCharacter:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(873)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(872)
					p.Match(YaklangParserTemplateDoubleQuoteStringCharacter)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(875)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext())
		}

	case YaklangParserTemplateDoubleQuoteStringStartExpression:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(877)
			p.Match(YaklangParserTemplateDoubleQuoteStringStartExpression)
		}
		{
			p.SetState(878)
			p.expression(0)
		}
		{
			p.SetState(879)
			p.Match(YaklangParserTemplateCloseBrace)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateBackTickStringAtomContext is an interface to support dynamic dispatch.
type ITemplateBackTickStringAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateBackTickStringAtomContext differentiates from other interfaces.
	IsTemplateBackTickStringAtomContext()
}

type TemplateBackTickStringAtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateBackTickStringAtomContext() *TemplateBackTickStringAtomContext {
	var p = new(TemplateBackTickStringAtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_templateBackTickStringAtom
	return p
}

func (*TemplateBackTickStringAtomContext) IsTemplateBackTickStringAtomContext() {}

func NewTemplateBackTickStringAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateBackTickStringAtomContext {
	var p = new(TemplateBackTickStringAtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_templateBackTickStringAtom

	return p
}

func (s *TemplateBackTickStringAtomContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateBackTickStringAtomContext) AllTemplateBackTickStringCharacter() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserTemplateBackTickStringCharacter)
}

func (s *TemplateBackTickStringAtomContext) TemplateBackTickStringCharacter(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateBackTickStringCharacter, i)
}

func (s *TemplateBackTickStringAtomContext) TemplateBackTickStringStartExpression() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateBackTickStringStartExpression, 0)
}

func (s *TemplateBackTickStringAtomContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TemplateBackTickStringAtomContext) TemplateCloseBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserTemplateCloseBrace, 0)
}

func (s *TemplateBackTickStringAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateBackTickStringAtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateBackTickStringAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitTemplateBackTickStringAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) TemplateBackTickStringAtom() (localctx ITemplateBackTickStringAtomContext) {
	this := p
	_ = this

	localctx = NewTemplateBackTickStringAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, YaklangParserRULE_templateBackTickStringAtom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(892)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserTemplateBackTickStringCharacter:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(884)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(883)
					p.Match(YaklangParserTemplateBackTickStringCharacter)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(886)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext())
		}

	case YaklangParserTemplateBackTickStringStartExpression:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(888)
			p.Match(YaklangParserTemplateBackTickStringStartExpression)
		}
		{
			p.SetState(889)
			p.expression(0)
		}
		{
			p.SetState(890)
			p.Match(YaklangParserTemplateCloseBrace)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBoolLiteralContext is an interface to support dynamic dispatch.
type IBoolLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBoolLiteralContext differentiates from other interfaces.
	IsBoolLiteralContext()
}

type BoolLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolLiteralContext() *BoolLiteralContext {
	var p = new(BoolLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_boolLiteral
	return p
}

func (*BoolLiteralContext) IsBoolLiteralContext() {}

func NewBoolLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BoolLiteralContext {
	var p = new(BoolLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_boolLiteral

	return p
}

func (s *BoolLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *BoolLiteralContext) True() antlr.TerminalNode {
	return s.GetToken(YaklangParserTrue, 0)
}

func (s *BoolLiteralContext) False() antlr.TerminalNode {
	return s.GetToken(YaklangParserFalse, 0)
}

func (s *BoolLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoolLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BoolLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitBoolLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) BoolLiteral() (localctx IBoolLiteralContext) {
	this := p
	_ = this

	localctx = NewBoolLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, YaklangParserRULE_boolLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(894)
		_la = p.GetTokenStream().LA(1)

		if !(_la == YaklangParserTrue || _la == YaklangParserFalse) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICharacterLiteralContext is an interface to support dynamic dispatch.
type ICharacterLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharacterLiteralContext differentiates from other interfaces.
	IsCharacterLiteralContext()
}

type CharacterLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharacterLiteralContext() *CharacterLiteralContext {
	var p = new(CharacterLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_characterLiteral
	return p
}

func (*CharacterLiteralContext) IsCharacterLiteralContext() {}

func NewCharacterLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CharacterLiteralContext {
	var p = new(CharacterLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_characterLiteral

	return p
}

func (s *CharacterLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *CharacterLiteralContext) CharacterLiteral() antlr.TerminalNode {
	return s.GetToken(YaklangParserCharacterLiteral, 0)
}

func (s *CharacterLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharacterLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CharacterLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitCharacterLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) CharacterLiteral() (localctx ICharacterLiteralContext) {
	this := p
	_ = this

	localctx = NewCharacterLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, YaklangParserRULE_characterLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(896)
		p.Match(YaklangParserCharacterLiteral)
	}

	return localctx
}

// ISliceLiteralContext is an interface to support dynamic dispatch.
type ISliceLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceLiteralContext differentiates from other interfaces.
	IsSliceLiteralContext()
}

type SliceLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceLiteralContext() *SliceLiteralContext {
	var p = new(SliceLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_sliceLiteral
	return p
}

func (*SliceLiteralContext) IsSliceLiteralContext() {}

func NewSliceLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceLiteralContext {
	var p = new(SliceLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_sliceLiteral

	return p
}

func (s *SliceLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceLiteralContext) LBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBracket, 0)
}

func (s *SliceLiteralContext) RBracket() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBracket, 0)
}

func (s *SliceLiteralContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *SliceLiteralContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *SliceLiteralContext) ExpressionListMultiline() IExpressionListMultilineContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListMultilineContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListMultilineContext)
}

func (s *SliceLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitSliceLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) SliceLiteral() (localctx ISliceLiteralContext) {
	this := p
	_ = this

	localctx = NewSliceLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, YaklangParserRULE_sliceLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(898)
		p.Match(YaklangParserLBracket)
	}
	p.SetState(902)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(899)
				p.Ws()
			}

		}
		p.SetState(904)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext())
	}
	p.SetState(906)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8727440654341) != 0 {
		{
			p.SetState(905)
			p.ExpressionListMultiline()
		}

	}
	p.SetState(911)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserLF {
		{
			p.SetState(908)
			p.Ws()
		}

		p.SetState(913)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(914)
		p.Match(YaklangParserRBracket)
	}

	return localctx
}

// ISliceTypedLiteralContext is an interface to support dynamic dispatch.
type ISliceTypedLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceTypedLiteralContext differentiates from other interfaces.
	IsSliceTypedLiteralContext()
}

type SliceTypedLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceTypedLiteralContext() *SliceTypedLiteralContext {
	var p = new(SliceTypedLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_sliceTypedLiteral
	return p
}

func (*SliceTypedLiteralContext) IsSliceTypedLiteralContext() {}

func NewSliceTypedLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceTypedLiteralContext {
	var p = new(SliceTypedLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_sliceTypedLiteral

	return p
}

func (s *SliceTypedLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceTypedLiteralContext) SliceTypeLiteral() ISliceTypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISliceTypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISliceTypeLiteralContext)
}

func (s *SliceTypedLiteralContext) LBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBrace, 0)
}

func (s *SliceTypedLiteralContext) RBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBrace, 0)
}

func (s *SliceTypedLiteralContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *SliceTypedLiteralContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *SliceTypedLiteralContext) ExpressionListMultiline() IExpressionListMultilineContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListMultilineContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListMultilineContext)
}

func (s *SliceTypedLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceTypedLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceTypedLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitSliceTypedLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) SliceTypedLiteral() (localctx ISliceTypedLiteralContext) {
	this := p
	_ = this

	localctx = NewSliceTypedLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, YaklangParserRULE_sliceTypedLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(916)
		p.SliceTypeLiteral()
	}
	{
		p.SetState(917)
		p.Match(YaklangParserLBrace)
	}
	p.SetState(921)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(918)
				p.Ws()
			}

		}
		p.SetState(923)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext())
	}
	p.SetState(925)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8727440654341) != 0 {
		{
			p.SetState(924)
			p.ExpressionListMultiline()
		}

	}
	p.SetState(930)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserLF {
		{
			p.SetState(927)
			p.Ws()
		}

		p.SetState(932)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(933)
		p.Match(YaklangParserRBrace)
	}

	return localctx
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_expressionList
	return p
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionListContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *ExpressionListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitExpressionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ExpressionList() (localctx IExpressionListContext) {
	this := p
	_ = this

	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, YaklangParserRULE_expressionList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(935)
		p.expression(0)
	}
	p.SetState(940)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(936)
				p.Match(YaklangParserComma)
			}
			{
				p.SetState(937)
				p.expression(0)
			}

		}
		p.SetState(942)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext())
	}
	p.SetState(944)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 110, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(943)
			p.Match(YaklangParserComma)
		}

	}

	return localctx
}

// IExpressionListMultilineContext is an interface to support dynamic dispatch.
type IExpressionListMultilineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListMultilineContext differentiates from other interfaces.
	IsExpressionListMultilineContext()
}

type ExpressionListMultilineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListMultilineContext() *ExpressionListMultilineContext {
	var p = new(ExpressionListMultilineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_expressionListMultiline
	return p
}

func (*ExpressionListMultilineContext) IsExpressionListMultilineContext() {}

func NewExpressionListMultilineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListMultilineContext {
	var p = new(ExpressionListMultilineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_expressionListMultiline

	return p
}

func (s *ExpressionListMultilineContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListMultilineContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionListMultilineContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListMultilineContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *ExpressionListMultilineContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *ExpressionListMultilineContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionListMultilineContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *ExpressionListMultilineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListMultilineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListMultilineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitExpressionListMultiline(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) ExpressionListMultiline() (localctx IExpressionListMultilineContext) {
	this := p
	_ = this

	localctx = NewExpressionListMultilineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, YaklangParserRULE_expressionListMultiline)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(946)
		p.expression(0)
	}
	p.SetState(957)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(947)
				p.Match(YaklangParserComma)
			}
			p.SetState(951)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == YaklangParserLF {
				{
					p.SetState(948)
					p.Ws()
				}

				p.SetState(953)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(954)
				p.expression(0)
			}

		}
		p.SetState(959)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext())
	}
	p.SetState(961)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserComma {
		{
			p.SetState(960)
			p.Match(YaklangParserComma)
		}

	}

	return localctx
}

// IMapLiteralContext is an interface to support dynamic dispatch.
type IMapLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapLiteralContext differentiates from other interfaces.
	IsMapLiteralContext()
}

type MapLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapLiteralContext() *MapLiteralContext {
	var p = new(MapLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_mapLiteral
	return p
}

func (*MapLiteralContext) IsMapLiteralContext() {}

func NewMapLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapLiteralContext {
	var p = new(MapLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_mapLiteral

	return p
}

func (s *MapLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *MapLiteralContext) MapTypedLiteral() IMapTypedLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapTypedLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapTypedLiteralContext)
}

func (s *MapLiteralContext) LBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBrace, 0)
}

func (s *MapLiteralContext) RBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBrace, 0)
}

func (s *MapLiteralContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *MapLiteralContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *MapLiteralContext) MapPairs() IMapPairsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapPairsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapPairsContext)
}

func (s *MapLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMapLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MapLiteral() (localctx IMapLiteralContext) {
	this := p
	_ = this

	localctx = NewMapLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, YaklangParserRULE_mapLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(981)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case YaklangParserMap:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(963)
			p.MapTypedLiteral()
		}

	case YaklangParserLBrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(964)
			p.Match(YaklangParserLBrace)
		}
		p.SetState(968)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(965)
					p.Ws()
				}

			}
			p.SetState(970)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext())
		}
		p.SetState(972)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8727440654341) != 0 {
			{
				p.SetState(971)
				p.MapPairs()
			}

		}
		p.SetState(977)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == YaklangParserLF {
			{
				p.SetState(974)
				p.Ws()
			}

			p.SetState(979)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(980)
			p.Match(YaklangParserRBrace)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMapTypedLiteralContext is an interface to support dynamic dispatch.
type IMapTypedLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapTypedLiteralContext differentiates from other interfaces.
	IsMapTypedLiteralContext()
}

type MapTypedLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapTypedLiteralContext() *MapTypedLiteralContext {
	var p = new(MapTypedLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_mapTypedLiteral
	return p
}

func (*MapTypedLiteralContext) IsMapTypedLiteralContext() {}

func NewMapTypedLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapTypedLiteralContext {
	var p = new(MapTypedLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_mapTypedLiteral

	return p
}

func (s *MapTypedLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *MapTypedLiteralContext) MapTypeLiteral() IMapTypeLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapTypeLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapTypeLiteralContext)
}

func (s *MapTypedLiteralContext) LBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserLBrace, 0)
}

func (s *MapTypedLiteralContext) RBrace() antlr.TerminalNode {
	return s.GetToken(YaklangParserRBrace, 0)
}

func (s *MapTypedLiteralContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *MapTypedLiteralContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *MapTypedLiteralContext) MapPairs() IMapPairsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapPairsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapPairsContext)
}

func (s *MapTypedLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypedLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapTypedLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMapTypedLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MapTypedLiteral() (localctx IMapTypedLiteralContext) {
	this := p
	_ = this

	localctx = NewMapTypedLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, YaklangParserRULE_mapTypedLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(983)
		p.MapTypeLiteral()
	}
	{
		p.SetState(984)
		p.Match(YaklangParserLBrace)
	}
	p.SetState(988)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(985)
				p.Ws()
			}

		}
		p.SetState(990)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext())
	}
	p.SetState(992)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-8926975740524625914) != 0 || (int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&8727440654341) != 0 {
		{
			p.SetState(991)
			p.MapPairs()
		}

	}
	p.SetState(997)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == YaklangParserLF {
		{
			p.SetState(994)
			p.Ws()
		}

		p.SetState(999)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1000)
		p.Match(YaklangParserRBrace)
	}

	return localctx
}

// IMapPairsContext is an interface to support dynamic dispatch.
type IMapPairsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapPairsContext differentiates from other interfaces.
	IsMapPairsContext()
}

type MapPairsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapPairsContext() *MapPairsContext {
	var p = new(MapPairsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_mapPairs
	return p
}

func (*MapPairsContext) IsMapPairsContext() {}

func NewMapPairsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapPairsContext {
	var p = new(MapPairsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_mapPairs

	return p
}

func (s *MapPairsContext) GetParser() antlr.Parser { return s.parser }

func (s *MapPairsContext) AllMapPair() []IMapPairContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMapPairContext); ok {
			len++
		}
	}

	tst := make([]IMapPairContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMapPairContext); ok {
			tst[i] = t.(IMapPairContext)
			i++
		}
	}

	return tst
}

func (s *MapPairsContext) MapPair(i int) IMapPairContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapPairContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapPairContext)
}

func (s *MapPairsContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserComma)
}

func (s *MapPairsContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserComma, i)
}

func (s *MapPairsContext) AllWs() []IWsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWsContext); ok {
			len++
		}
	}

	tst := make([]IWsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWsContext); ok {
			tst[i] = t.(IWsContext)
			i++
		}
	}

	return tst
}

func (s *MapPairsContext) Ws(i int) IWsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWsContext)
}

func (s *MapPairsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapPairsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapPairsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMapPairs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MapPairs() (localctx IMapPairsContext) {
	this := p
	_ = this

	localctx = NewMapPairsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, YaklangParserRULE_mapPairs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1002)
		p.MapPair()
	}
	p.SetState(1013)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1003)
				p.Match(YaklangParserComma)
			}
			p.SetState(1007)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == YaklangParserLF {
				{
					p.SetState(1004)
					p.Ws()
				}

				p.SetState(1009)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1010)
				p.MapPair()
			}

		}
		p.SetState(1015)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext())
	}
	p.SetState(1017)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == YaklangParserComma {
		{
			p.SetState(1016)
			p.Match(YaklangParserComma)
		}

	}

	return localctx
}

// IMapPairContext is an interface to support dynamic dispatch.
type IMapPairContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapPairContext differentiates from other interfaces.
	IsMapPairContext()
}

type MapPairContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapPairContext() *MapPairContext {
	var p = new(MapPairContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_mapPair
	return p
}

func (*MapPairContext) IsMapPairContext() {}

func NewMapPairContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapPairContext {
	var p = new(MapPairContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_mapPair

	return p
}

func (s *MapPairContext) GetParser() antlr.Parser { return s.parser }

func (s *MapPairContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *MapPairContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MapPairContext) Colon() antlr.TerminalNode {
	return s.GetToken(YaklangParserColon, 0)
}

func (s *MapPairContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapPairContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapPairContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitMapPair(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) MapPair() (localctx IMapPairContext) {
	this := p
	_ = this

	localctx = NewMapPairContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, YaklangParserRULE_mapPair)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1019)
		p.expression(0)
	}
	{
		p.SetState(1020)
		p.Match(YaklangParserColon)
	}
	{
		p.SetState(1021)
		p.expression(0)
	}

	return localctx
}

// IWsContext is an interface to support dynamic dispatch.
type IWsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWsContext differentiates from other interfaces.
	IsWsContext()
}

type WsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWsContext() *WsContext {
	var p = new(WsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_ws
	return p
}

func (*WsContext) IsWsContext() {}

func NewWsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WsContext {
	var p = new(WsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_ws

	return p
}

func (s *WsContext) GetParser() antlr.Parser { return s.parser }

func (s *WsContext) AllLF() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserLF)
}

func (s *WsContext) LF(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserLF, i)
}

func (s *WsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitWs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Ws() (localctx IWsContext) {
	this := p
	_ = this

	localctx = NewWsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, YaklangParserRULE_ws)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1024)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1023)
				p.Match(YaklangParserLF)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1026)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext())
	}

	return localctx
}

// IEosContext is an interface to support dynamic dispatch.
type IEosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEosContext differentiates from other interfaces.
	IsEosContext()
}

type EosContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEosContext() *EosContext {
	var p = new(EosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = YaklangParserRULE_eos
	return p
}

func (*EosContext) IsEosContext() {}

func NewEosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EosContext {
	var p = new(EosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = YaklangParserRULE_eos

	return p
}

func (s *EosContext) GetParser() antlr.Parser { return s.parser }

func (s *EosContext) SemiColon() antlr.TerminalNode {
	return s.GetToken(YaklangParserSemiColon, 0)
}

func (s *EosContext) AllLF() []antlr.TerminalNode {
	return s.GetTokens(YaklangParserLF)
}

func (s *EosContext) LF(i int) antlr.TerminalNode {
	return s.GetToken(YaklangParserLF, i)
}

func (s *EosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EosContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case YaklangParserVisitor:
		return t.VisitEos(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *YaklangParser) Eos() (localctx IEosContext) {
	this := p
	_ = this

	localctx = NewEosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, YaklangParserRULE_eos)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1035)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 126, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1028)
			p.Match(YaklangParserSemiColon)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1030)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(1029)
					p.Match(YaklangParserLF)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1032)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext())
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1034)

		if !(this.closingBracket()) {
			panic(antlr.NewFailedPredicateException(p, " this.closingBracket() ", ""))
		}

	}

	return localctx
}

func (p *YaklangParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 39:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 74:
		var t *EosContext = nil
		if localctx != nil {
			t = localctx.(*EosContext)
		}
		return p.Eos_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *YaklangParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 1)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 14)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *YaklangParser) Eos_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 10:
		return this.closingBracket()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
